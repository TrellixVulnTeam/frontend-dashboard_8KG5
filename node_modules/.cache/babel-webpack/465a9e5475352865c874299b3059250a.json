{"ast":null,"code":"import _defineProperty from \"C:/Users/ZRANGO/Workspaces/Angular IDE/dashboard/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _inherits from \"C:/Users/ZRANGO/Workspaces/Angular IDE/dashboard/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/ZRANGO/Workspaces/Angular IDE/dashboard/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/ZRANGO/Workspaces/Angular IDE/dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/ZRANGO/Workspaces/Angular IDE/dashboard/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate, __param } from 'tslib';\nimport { ɵɵdefineInjectable, Injectable, ComponentFactoryResolver, ApplicationRef, Injector, Optional, Inject, ɵɵinject, INJECTOR, InjectionToken, Input, HostListener, Component, EventEmitter, Output, Directive, ContentChild, ElementRef, ChangeDetectionStrategy, ViewChild, Pipe, Renderer2, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Subject, BehaviorSubject, merge } from 'rxjs';\nimport { shareReplay, takeUntil, filter, tap, map, distinctUntilChanged } from 'rxjs/operators';\nimport { trigger, transition, style, animate, sequence } from '@angular/animations';\nimport { DateTime, Info } from 'luxon';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\n\nvar NgxMaterialTimepickerEventService = /*#__PURE__*/function () {\n  function NgxMaterialTimepickerEventService() {\n    _classCallCheck(this, NgxMaterialTimepickerEventService);\n\n    this.backdropClickSubject = new Subject();\n    this.keydownEventSubject = new Subject();\n  }\n\n  _createClass(NgxMaterialTimepickerEventService, [{\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(event) {\n      switch (event.type) {\n        case 'click':\n          this.backdropClickSubject.next(event);\n          break;\n\n        case 'keydown':\n          this.keydownEventSubject.next(event);\n          break;\n\n        default:\n          throw new Error('no such event type');\n      }\n    }\n  }, {\n    key: \"backdropClick\",\n    get: function get() {\n      return this.backdropClickSubject.asObservable().pipe(shareReplay({\n        bufferSize: 1,\n        refCount: true\n      }));\n    }\n  }, {\n    key: \"keydownEvent\",\n    get: function get() {\n      return this.keydownEventSubject.asObservable().pipe(shareReplay({\n        bufferSize: 1,\n        refCount: true\n      }));\n    }\n  }]);\n\n  return NgxMaterialTimepickerEventService;\n}();\n\nNgxMaterialTimepickerEventService.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function NgxMaterialTimepickerEventService_Factory() {\n    return new NgxMaterialTimepickerEventService();\n  },\n  token: NgxMaterialTimepickerEventService,\n  providedIn: \"root\"\n});\nNgxMaterialTimepickerEventService = __decorate([Injectable({\n  providedIn: 'root'\n})], NgxMaterialTimepickerEventService);\n\nvar DomService = /*#__PURE__*/function () {\n  function DomService(cfr, appRef, injector, document) {\n    _classCallCheck(this, DomService);\n\n    this.cfr = cfr;\n    this.appRef = appRef;\n    this.injector = injector;\n    this.document = document;\n  }\n\n  _createClass(DomService, [{\n    key: \"appendTimepickerToBody\",\n    value: function appendTimepickerToBody(timepicker, config) {\n      var _this = this;\n\n      this.componentRef = this.cfr.resolveComponentFactory(timepicker).create(this.injector);\n      Object.keys(config).forEach(function (key) {\n        return _this.componentRef.instance[key] = config[key];\n      });\n      this.appRef.attachView(this.componentRef.hostView);\n      var domElement = this.componentRef.hostView.rootNodes[0];\n      this.document.body.appendChild(domElement);\n    }\n  }, {\n    key: \"destroyTimepicker\",\n    value: function destroyTimepicker() {\n      this.componentRef.destroy();\n      this.appRef.detachView(this.componentRef.hostView);\n    }\n  }]);\n\n  return DomService;\n}();\n\nDomService.ctorParameters = function () {\n  return [{\n    type: ComponentFactoryResolver\n  }, {\n    type: ApplicationRef\n  }, {\n    type: Injector\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\nDomService.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function DomService_Factory() {\n    return new DomService(ɵɵinject(ComponentFactoryResolver), ɵɵinject(ApplicationRef), ɵɵinject(INJECTOR), ɵɵinject(DOCUMENT, 8));\n  },\n  token: DomService,\n  providedIn: \"root\"\n});\nDomService = __decorate([Injectable({\n  providedIn: 'root'\n}), __param(3, Optional()), __param(3, Inject(DOCUMENT))], DomService);\nvar TimeUnit;\n\n(function (TimeUnit) {\n  TimeUnit[TimeUnit[\"HOUR\"] = 0] = \"HOUR\";\n  TimeUnit[TimeUnit[\"MINUTE\"] = 1] = \"MINUTE\";\n})(TimeUnit || (TimeUnit = {}));\n\nvar TimePeriod;\n\n(function (TimePeriod) {\n  TimePeriod[\"AM\"] = \"AM\";\n  TimePeriod[\"PM\"] = \"PM\";\n})(TimePeriod || (TimePeriod = {}));\n\nvar TimeFormat;\n\n(function (TimeFormat) {\n  TimeFormat[\"TWELVE\"] = \"hh:mm a\";\n  TimeFormat[\"TWELVE_SHORT\"] = \"h:m a\";\n  TimeFormat[\"TWENTY_FOUR\"] = \"HH:mm\";\n  TimeFormat[\"TWENTY_FOUR_SHORT\"] = \"H:m\";\n})(TimeFormat || (TimeFormat = {}));\n\nfunction isSameOrAfter(time, compareWith) {\n  var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'minutes';\n\n  if (unit === 'hours') {\n    return time.hour >= compareWith.hour;\n  }\n\n  if (unit === 'minutes') {\n    return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\n  }\n}\n\nfunction isSameOrBefore(time, compareWith) {\n  var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'minutes';\n\n  if (unit === 'hours') {\n    return time.hour <= compareWith.hour;\n  }\n\n  if (unit === 'minutes') {\n    return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\n  }\n}\n\nfunction isBetween(time, before, after) {\n  var unit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'minutes';\n\n  if (unit === 'hours') {\n    return isSameOrBefore(time, after, unit) && isSameOrAfter(time, before, unit);\n  }\n\n  if (unit === 'minutes') {\n    return isSameOrBefore(time, after) && isSameOrAfter(time, before);\n  }\n}\n\nfunction isDigit(e) {\n  // Allow: backspace, delete, tab, escape, enter\n  if ([46, 8, 9, 27, 13].some(function (n) {\n    return n === e.keyCode;\n  }) || // Allow: Ctrl/cmd+A\n  e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true) || // Allow: Ctrl/cmd+C\n  e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true) || // Allow: Ctrl/cmd+X\n  e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true) || // Allow: home, end, left, right, up, down\n  e.keyCode >= 35 && e.keyCode <= 40) {\n    return true;\n  }\n\n  return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\n} // @dynamic\n\n\nvar TimeAdapter = /*#__PURE__*/function () {\n  function TimeAdapter() {\n    _classCallCheck(this, TimeAdapter);\n  }\n\n  _createClass(TimeAdapter, null, [{\n    key: \"parseTime\",\n    value: function parseTime(time, opts) {\n      var _TimeAdapter$getLocal = TimeAdapter.getLocaleOptionsByTime(time, opts),\n          numberingSystem = _TimeAdapter$getLocal.numberingSystem,\n          locale = _TimeAdapter$getLocal.locale;\n\n      var isPeriodExist = time.split(' ').length === 2;\n      var timeMask = isPeriodExist ? TimeFormat.TWELVE_SHORT : TimeFormat.TWENTY_FOUR_SHORT;\n      return DateTime.fromFormat(time, timeMask, {\n        numberingSystem: numberingSystem,\n        locale: locale\n      });\n    }\n  }, {\n    key: \"formatTime\",\n    value: function formatTime(time, opts) {\n      if (!time) {\n        return 'Invalid Time';\n      }\n\n      var format = opts.format;\n      var parsedTime = TimeAdapter.parseTime(time, opts).setLocale(TimeAdapter.DEFAULT_LOCALE);\n\n      if (format !== 24) {\n        return parsedTime.toLocaleString(Object.assign({}, DateTime.TIME_SIMPLE, {\n          hour12: format !== 24,\n          numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM\n        })).replace(/\\u200E/g, '');\n      }\n\n      return parsedTime.toISOTime({\n        includeOffset: false,\n        suppressMilliseconds: true,\n        suppressSeconds: true\n      }).replace(/\\u200E/g, '');\n    }\n  }, {\n    key: \"toLocaleTimeString\",\n    value: function toLocaleTimeString(time) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _opts$format = opts.format,\n          format = _opts$format === void 0 ? TimeAdapter.DEFAULT_FORMAT : _opts$format,\n          _opts$locale = opts.locale,\n          locale = _opts$locale === void 0 ? TimeAdapter.DEFAULT_LOCALE : _opts$locale;\n      var hourCycle = format === 24 ? 'h23' : 'h12';\n      var timeFormat = Object.assign({}, DateTime.TIME_SIMPLE, {\n        hourCycle: hourCycle\n      });\n      var timeMask = format === 24 ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\n      return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);\n    }\n  }, {\n    key: \"isTimeAvailable\",\n    value: function isTimeAvailable(time, min, max, granularity, minutesGap, format) {\n      if (!time) {\n        return;\n      }\n\n      var convertedTime = this.parseTime(time, {\n        format: format\n      });\n      var minutes = convertedTime.minute;\n\n      if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\n        throw new Error(\"Your minutes - \".concat(minutes, \" doesn't match your minutesGap - \").concat(minutesGap));\n      }\n\n      var isAfter = min && !max && isSameOrAfter(convertedTime, min, granularity);\n      var isBefore = max && !min && isSameOrBefore(convertedTime, max, granularity);\n      var between = min && max && isBetween(convertedTime, min, max, granularity);\n      var isAvailable = !min && !max;\n      return isAfter || isBefore || between || isAvailable;\n    }\n    /***\n     *  Format hour according to time format (12 or 24)\n     */\n\n  }, {\n    key: \"formatHour\",\n    value: function formatHour(currentHour, format, period) {\n      if (format === 24) {\n        return currentHour;\n      }\n\n      var hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\n\n      if (period === TimePeriod.AM && hour === 12) {\n        return 0;\n      } else if (period === TimePeriod.PM && hour === 24) {\n        return 12;\n      }\n\n      return hour;\n    }\n  }, {\n    key: \"fromDateTimeToString\",\n    value: function fromDateTimeToString(time, format) {\n      var timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\n      return time.reconfigure({\n        numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,\n        locale: TimeAdapter.DEFAULT_LOCALE\n      }).toFormat(timeFormat);\n    }\n  }, {\n    key: \"getLocaleOptionsByTime\",\n    value: function getLocaleOptionsByTime(time, opts) {\n      var _DateTime$local$setLo = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts(),\n          numberingSystem = _DateTime$local$setLo.numberingSystem,\n          locale = _DateTime$local$setLo.locale;\n\n      var localeConfig = {\n        numberingSystem: numberingSystem,\n        locale: locale\n      };\n      var defaultConfig = {\n        numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,\n        locale: TimeAdapter.DEFAULT_LOCALE\n      };\n      return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;\n    }\n  }]);\n\n  return TimeAdapter;\n}();\n\nTimeAdapter.DEFAULT_FORMAT = 12;\nTimeAdapter.DEFAULT_LOCALE = 'en-US';\nTimeAdapter.DEFAULT_NUMBERING_SYSTEM = 'latn';\nvar DEFAULT_HOUR = {\n  time: 12,\n  angle: 360\n};\nvar DEFAULT_MINUTE = {\n  time: 0,\n  angle: 360\n};\n\nvar NgxMaterialTimepickerService = /*#__PURE__*/function () {\n  function NgxMaterialTimepickerService() {\n    _classCallCheck(this, NgxMaterialTimepickerService);\n\n    this.hourSubject = new BehaviorSubject(DEFAULT_HOUR);\n    this.minuteSubject = new BehaviorSubject(DEFAULT_MINUTE);\n    this.periodSubject = new BehaviorSubject(TimePeriod.AM);\n  }\n\n  _createClass(NgxMaterialTimepickerService, [{\n    key: \"setDefaultTimeIfAvailable\",\n    value: function setDefaultTimeIfAvailable(time, min, max, format, minutesGap) {\n      /* Workaround to double error message*/\n      try {\n        if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes', minutesGap)) {\n          this.setDefaultTime(time, format);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }, {\n    key: \"getFullTime\",\n    value: function getFullTime(format) {\n      var selectedHour = this.hourSubject.getValue().time;\n      var selectedMinute = this.minuteSubject.getValue().time;\n      var hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;\n      var minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;\n      var period = format === 12 ? this.periodSubject.getValue() : '';\n      var time = \"\".concat(hour, \":\").concat(minute, \" \").concat(period).trim();\n      return TimeAdapter.formatTime(time, {\n        format: format\n      });\n    }\n  }, {\n    key: \"setDefaultTime\",\n    value: function setDefaultTime(time, format) {\n      var defaultTime = TimeAdapter.parseTime(time, {\n        format: format\n      }).toJSDate();\n\n      if (DateTime.fromJSDate(defaultTime).isValid) {\n        var period = time.substr(time.length - 2).toUpperCase();\n        var hour = defaultTime.getHours();\n        this.hour = Object.assign({}, DEFAULT_HOUR, {\n          time: formatHourByPeriod(hour, period)\n        });\n        this.minute = Object.assign({}, DEFAULT_MINUTE, {\n          time: defaultTime.getMinutes()\n        });\n        this.period = period;\n      } else {\n        this.resetTime();\n      }\n    }\n  }, {\n    key: \"resetTime\",\n    value: function resetTime() {\n      this.hour = Object.assign({}, DEFAULT_HOUR);\n      this.minute = Object.assign({}, DEFAULT_MINUTE);\n      this.period = TimePeriod.AM;\n    }\n  }, {\n    key: \"hour\",\n    set: function set(hour) {\n      this.hourSubject.next(hour);\n    }\n  }, {\n    key: \"selectedHour\",\n    get: function get() {\n      return this.hourSubject.asObservable();\n    }\n  }, {\n    key: \"minute\",\n    set: function set(minute) {\n      this.minuteSubject.next(minute);\n    }\n  }, {\n    key: \"selectedMinute\",\n    get: function get() {\n      return this.minuteSubject.asObservable();\n    }\n  }, {\n    key: \"period\",\n    set: function set(period) {\n      var isPeriodValid = period === TimePeriod.AM || period === TimePeriod.PM;\n\n      if (isPeriodValid) {\n        this.periodSubject.next(period);\n      }\n    }\n  }, {\n    key: \"selectedPeriod\",\n    get: function get() {\n      return this.periodSubject.asObservable();\n    }\n  }]);\n\n  return NgxMaterialTimepickerService;\n}();\n\nNgxMaterialTimepickerService.ngInjectableDef = ɵɵdefineInjectable({\n  factory: function NgxMaterialTimepickerService_Factory() {\n    return new NgxMaterialTimepickerService();\n  },\n  token: NgxMaterialTimepickerService,\n  providedIn: \"root\"\n});\nNgxMaterialTimepickerService = __decorate([Injectable({\n  providedIn: 'root'\n})], NgxMaterialTimepickerService);\n/***\n *  Format hour in 24hours format to meridian (AM or PM) format\n */\n\nfunction formatHourByPeriod(hour, period) {\n  switch (period) {\n    case TimePeriod.AM:\n      return hour === 0 ? 12 : hour;\n\n    case TimePeriod.PM:\n      return hour === 12 ? 12 : hour - 12;\n\n    default:\n      return hour;\n  }\n}\n\nvar TIME_LOCALE = new InjectionToken('TimeLocale', {\n  providedIn: 'root',\n  factory: function factory() {\n    return TimeAdapter.DEFAULT_LOCALE;\n  }\n});\nvar AnimationState;\n\n(function (AnimationState) {\n  AnimationState[\"ENTER\"] = \"enter\";\n  AnimationState[\"LEAVE\"] = \"leave\";\n})(AnimationState || (AnimationState = {}));\n\nvar NgxMaterialTimepickerContainerComponent = /*#__PURE__*/function () {\n  function NgxMaterialTimepickerContainerComponent(timepickerService, eventService, locale) {\n    _classCallCheck(this, NgxMaterialTimepickerContainerComponent);\n\n    this.timepickerService = timepickerService;\n    this.eventService = eventService;\n    this.locale = locale;\n    this.timeUnit = TimeUnit;\n    this.activeTimeUnit = TimeUnit.HOUR;\n    this.unsubscribe = new Subject();\n  }\n\n  _createClass(NgxMaterialTimepickerContainerComponent, [{\n    key: \"onKeydown\",\n    value: function onKeydown(e) {\n      this.eventService.dispatchEvent(e);\n      e.stopPropagation();\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.animationState = !this.disableAnimation && AnimationState.ENTER;\n      this.defineTime();\n      this.selectedHour = this.timepickerService.selectedHour.pipe(shareReplay({\n        bufferSize: 1,\n        refCount: true\n      }));\n      this.selectedMinute = this.timepickerService.selectedMinute.pipe(shareReplay({\n        bufferSize: 1,\n        refCount: true\n      }));\n      this.selectedPeriod = this.timepickerService.selectedPeriod.pipe(shareReplay({\n        bufferSize: 1,\n        refCount: true\n      }));\n      this.timepickerBaseRef.timeUpdated.pipe(takeUntil(this.unsubscribe)).subscribe(this.setDefaultTime.bind(this));\n    }\n  }, {\n    key: \"onHourChange\",\n    value: function onHourChange(hour) {\n      this.timepickerService.hour = hour;\n      this.onTimeChange();\n    }\n  }, {\n    key: \"onHourSelected\",\n    value: function onHourSelected(hour) {\n      if (!this.hoursOnly) {\n        this.changeTimeUnit(TimeUnit.MINUTE);\n      }\n\n      this.timepickerBaseRef.hourSelected.next(hour);\n    }\n  }, {\n    key: \"onMinuteChange\",\n    value: function onMinuteChange(minute) {\n      this.timepickerService.minute = minute;\n      this.onTimeChange();\n    }\n  }, {\n    key: \"changePeriod\",\n    value: function changePeriod(period) {\n      this.timepickerService.period = period;\n      this.onTimeChange();\n    }\n  }, {\n    key: \"changeTimeUnit\",\n    value: function changeTimeUnit(unit) {\n      this.activeTimeUnit = unit;\n    }\n  }, {\n    key: \"setTime\",\n    value: function setTime() {\n      this.timepickerBaseRef.timeSet.next(this.timepickerService.getFullTime(this.format));\n      this.close();\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this.disableAnimation) {\n        this.timepickerBaseRef.close();\n        return;\n      }\n\n      this.animationState = AnimationState.LEAVE;\n    }\n  }, {\n    key: \"animationDone\",\n    value: function animationDone(event) {\n      if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\n        this.timepickerBaseRef.close();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.unsubscribe.next();\n      this.unsubscribe.complete();\n    }\n  }, {\n    key: \"setDefaultTime\",\n    value: function setDefaultTime(time) {\n      this.timepickerService.setDefaultTimeIfAvailable(time, this.minTime, this.maxTime, this.format, this.minutesGap);\n    }\n  }, {\n    key: \"defineTime\",\n    value: function defineTime() {\n      var minTime = this.minTime;\n\n      if (minTime && !this.time && !this.defaultTime) {\n        var time = TimeAdapter.fromDateTimeToString(minTime, this.format);\n        this.setDefaultTime(time);\n      }\n    }\n  }, {\n    key: \"onTimeChange\",\n    value: function onTimeChange() {\n      var time = TimeAdapter.toLocaleTimeString(this.timepickerService.getFullTime(this.format), {\n        locale: this.locale,\n        format: this.format\n      });\n      this.timepickerBaseRef.timeChanged.emit(time);\n    }\n  }, {\n    key: \"defaultTime\",\n    set: function set(time) {\n      this._defaultTime = time;\n      this.setDefaultTime(time);\n    },\n    get: function get() {\n      return this._defaultTime;\n    }\n  }]);\n\n  return NgxMaterialTimepickerContainerComponent;\n}();\n\nNgxMaterialTimepickerContainerComponent.ctorParameters = function () {\n  return [{\n    type: NgxMaterialTimepickerService\n  }, {\n    type: NgxMaterialTimepickerEventService\n  }, {\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [TIME_LOCALE]\n    }]\n  }];\n};\n\n__decorate([Input()], NgxMaterialTimepickerContainerComponent.prototype, \"defaultTime\", null);\n\n__decorate([HostListener('keydown', ['$event'])], NgxMaterialTimepickerContainerComponent.prototype, \"onKeydown\", null);\n\nNgxMaterialTimepickerContainerComponent = __decorate([Component({\n  selector: 'ngx-material-timepicker-container',\n  template: \"<div class=\\\"timepicker-backdrop-overlay\\\" [overlay]=\\\"preventOverlayClick\\\"\\n     [ngClass]=\\\"{'timepicker-backdrop-overlay--transparent': appendToInput}\\\"></div>\\n<div class=\\\"timepicker-overlay\\\">\\n    <ngx-material-timepicker-content [appendToInput]=\\\"appendToInput\\\"\\n                                     [inputElement]=\\\"inputElement\\\"\\n                                     [ngxMaterialTimepickerTheme]=\\\"theme\\\">\\n        <div class=\\\"timepicker\\\"\\n             [@timepicker]=\\\"animationState\\\"\\n             (@timepicker.done)=\\\"animationDone($event)\\\"\\n             [ngClass]=\\\"timepickerClass\\\">\\n            <header class=\\\"timepicker__header\\\">\\n                <ngx-material-timepicker-dial [format]=\\\"format\\\" [hour]=\\\"(selectedHour | async)?.time\\\"\\n                                              [minute]=\\\"(selectedMinute | async)?.time\\\"\\n                                              [period]=\\\"selectedPeriod | async\\\"\\n                                              [activeTimeUnit]=\\\"activeTimeUnit\\\"\\n                                              [minTime]=\\\"minTime\\\"\\n                                              [maxTime]=\\\"maxTime\\\"\\n                                              [isEditable]=\\\"enableKeyboardInput\\\"\\n                                              [editableHintTmpl]=\\\"editableHintTmpl\\\"\\n                                              [minutesGap]=\\\"minutesGap\\\"\\n                                              [hoursOnly]=\\\"hoursOnly\\\"\\n                                              (periodChanged)=\\\"changePeriod($event)\\\"\\n                                              (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\n                                              (hourChanged)=\\\"onHourChange($event)\\\"\\n                                              (minuteChanged)=\\\"onMinuteChange($event)\\\"\\n                ></ngx-material-timepicker-dial>\\n            </header>\\n            <div class=\\\"timepicker__main-content\\\">\\n                <div class=\\\"timepicker__body\\\" [ngSwitch]=\\\"activeTimeUnit\\\">\\n                    <div *ngSwitchCase=\\\"timeUnit.HOUR\\\">\\n                        <ngx-material-timepicker-24-hours-face *ngIf=\\\"format === 24;else ampmHours\\\"\\n                                                               (hourChange)=\\\"onHourChange($event)\\\"\\n                                                               [selectedHour]=\\\"selectedHour | async\\\"\\n                                                               [minTime]=\\\"minTime\\\"\\n                                                               [maxTime]=\\\"maxTime\\\"\\n                                                               [format]=\\\"format\\\"\\n                                                               (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-material-timepicker-24-hours-face>\\n                        <ng-template #ampmHours>\\n                            <ngx-material-timepicker-12-hours-face\\n                                (hourChange)=\\\"onHourChange($event)\\\"\\n                                [selectedHour]=\\\"selectedHour | async\\\"\\n                                [period]=\\\"selectedPeriod | async\\\"\\n                                [minTime]=\\\"minTime\\\"\\n                                [maxTime]=\\\"maxTime\\\"\\n                                (hourSelected)=\\\"onHourSelected($event)\\\"></ngx-material-timepicker-12-hours-face>\\n                        </ng-template>\\n                    </div>\\n                    <ngx-material-timepicker-minutes-face *ngSwitchCase=\\\"timeUnit.MINUTE\\\"\\n                                                          [selectedMinute]=\\\"selectedMinute | async\\\"\\n                                                          [selectedHour]=\\\"(selectedHour | async)?.time\\\"\\n                                                          [minTime]=\\\"minTime\\\"\\n                                                          [maxTime]=\\\"maxTime\\\"\\n                                                          [format]=\\\"format\\\"\\n                                                          [period]=\\\"selectedPeriod | async\\\"\\n                                                          [minutesGap]=\\\"minutesGap\\\"\\n                                                          (minuteChange)=\\\"onMinuteChange($event)\\\"></ngx-material-timepicker-minutes-face>\\n                </div>\\n                <div class=\\\"timepicker__actions\\\">\\n                    <div (click)=\\\"close()\\\">\\n                        <!--suppress HtmlUnknownAttribute -->\\n                        <ng-container\\n                            *ngTemplateOutlet=\\\"cancelBtnTmpl ? cancelBtnTmpl : cancelBtnDefault\\\"></ng-container>\\n                    </div>\\n                    <div (click)=\\\"setTime()\\\">\\n                        <!--suppress HtmlUnknownAttribute -->\\n                        <ng-container\\n                            *ngTemplateOutlet=\\\"confirmBtnTmpl ? confirmBtnTmpl : confirmBtnDefault\\\"></ng-container>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </ngx-material-timepicker-content>\\n</div>\\n<ng-template #cancelBtnDefault>\\n    <ngx-material-timepicker-button>Cancel</ngx-material-timepicker-button>\\n</ng-template>\\n<ng-template #confirmBtnDefault>\\n    <ngx-material-timepicker-button>Ok</ngx-material-timepicker-button>\\n</ng-template>\\n\",\n  animations: [trigger('timepicker', [transition(\"* => \".concat(AnimationState.ENTER), [style({\n    transform: 'translateY(-30%)'\n  }), animate('0.2s ease-out', style({\n    transform: 'translateY(0)'\n  }))]), transition(\"\".concat(AnimationState.ENTER, \" => \").concat(AnimationState.LEAVE), [style({\n    transform: 'translateY(0)',\n    opacity: 1\n  }), animate('0.2s ease-out', style({\n    transform: 'translateY(-30%)',\n    opacity: 0\n  }))])])],\n  providers: [NgxMaterialTimepickerService],\n  styles: [\":host{--body-background-color:#fff;--primary-font-family:'Roboto',sans-serif;--button-color:deepskyblue;--dial-active-color:#fff;--dial-inactive-color:rgba(255, 255, 255, .5);--dial-background-color:deepskyblue;--dial-editable-active-color:deepskyblue;--dial-editable-background-color:#fff;--clock-face-time-active-color:#fff;--clock-face-time-inactive-color:#6c6c6c;--clock-face-inner-time-inactive-color:#929292;--clock-face-time-disabled-color:#c5c5c5;--clock-face-background-color:#f0f0f0;--clock-hand-color:deepskyblue}.timepicker-backdrop-overlay{position:fixed;top:0;bottom:0;right:0;left:0;background-color:rgba(0,0,0,.3);z-index:999;pointer-events:auto}.timepicker-backdrop-overlay--transparent{background-color:transparent}.timepicker-overlay{position:fixed;top:0;left:0;width:100%;height:100%;display:flex;justify-content:center;align-items:center;z-index:999;pointer-events:none}.timepicker{width:300px;border-radius:2px;box-shadow:rgba(0,0,0,.25) 0 14px 45px,rgba(0,0,0,.22) 0 10px 18px;outline:0;position:static;z-index:999;pointer-events:auto}.timepicker__header{padding:15px 30px;background-color:#00bfff}@supports (background-color:var(--dial-background-color)){.timepicker__header{background-color:var(--dial-background-color)}}.timepicker__body{padding:15px 5px;display:flex;justify-content:center;align-items:center;background-color:#fff}@supports (background-color:var(--body-background-color)){.timepicker__body{background-color:var(--body-background-color)}}.timepicker__actions{display:flex;justify-content:flex-end;padding:15px;background-color:#fff}@supports (background-color:var(--body-background-color)){.timepicker__actions{background-color:var(--body-background-color)}}@media (max-device-width:1023px) and (orientation:landscape){.timepicker{display:flex;width:515px}.timepicker__header{display:flex;align-items:center}.timepicker__main-content{display:flex;flex-direction:column;width:100%}.timepicker__actions{padding:5px;margin-top:-1px}}\"]\n}), __param(2, Inject(TIME_LOCALE))], NgxMaterialTimepickerContainerComponent);\nvar ESCAPE = 27;\n\nvar NgxMaterialTimepickerComponent = /*#__PURE__*/function () {\n  function NgxMaterialTimepickerComponent(eventService, domService) {\n    _classCallCheck(this, NgxMaterialTimepickerComponent);\n\n    this.eventService = eventService;\n    this.domService = domService;\n    this.timeUpdated = new Subject();\n    this.isEsc = true;\n    this.hoursOnly = false;\n    this.timeSet = new EventEmitter();\n    this.opened = new EventEmitter();\n    this.closed = new EventEmitter();\n    this.hourSelected = new EventEmitter();\n    this.timeChanged = new EventEmitter();\n    this.unsubscribe = new Subject();\n  }\n  /**\n   * @deprecated Since version 5.1.1. Will be deleted on version 6.0.0. Use @Input() theme instead\n   */\n\n\n  _createClass(NgxMaterialTimepickerComponent, [{\n    key: \"registerInput\",\n\n    /***\n     * Register an input with this timepicker.\n     * input - The timepicker input to register with this timepicker\n     */\n    value: function registerInput(input) {\n      if (this.timepickerInput) {\n        throw Error('A Timepicker can only be associated with a single input.');\n      }\n\n      this.timepickerInput = input;\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      this.domService.appendTimepickerToBody(NgxMaterialTimepickerContainerComponent, {\n        timepickerBaseRef: this,\n        time: this.time,\n        defaultTime: this.defaultTime,\n        maxTime: this.maxTime,\n        minTime: this.minTime,\n        format: this.format,\n        minutesGap: this.minutesGap,\n        disableAnimation: this.disableAnimation,\n        cancelBtnTmpl: this.cancelBtnTmpl,\n        confirmBtnTmpl: this.confirmBtnTmpl,\n        editableHintTmpl: this.editableHintTmpl,\n        disabled: this.disabled,\n        enableKeyboardInput: this.enableKeyboardInput,\n        preventOverlayClick: this.preventOverlayClick,\n        appendToInput: this.appendToInput,\n        hoursOnly: this.hoursOnly,\n        theme: this.theme || this._ngxMaterialTimepickerTheme,\n        timepickerClass: this.timepickerClass,\n        inputElement: this.inputElement\n      });\n      this.opened.next();\n      this.subscribeToEvents();\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.domService.destroyTimepicker();\n      this.closed.next();\n      this.unsubscribeFromEvents();\n    }\n  }, {\n    key: \"updateTime\",\n    value: function updateTime(time) {\n      this.timeUpdated.next(time);\n    }\n  }, {\n    key: \"subscribeToEvents\",\n    value: function subscribeToEvents() {\n      var _this2 = this;\n\n      merge(this.eventService.backdropClick, this.eventService.keydownEvent.pipe(filter(function (e) {\n        return e.keyCode === ESCAPE && _this2.isEsc;\n      }))).pipe(takeUntil(this.unsubscribe)).subscribe(function () {\n        return _this2.close();\n      });\n    }\n  }, {\n    key: \"unsubscribeFromEvents\",\n    value: function unsubscribeFromEvents() {\n      this.unsubscribe.next();\n      this.unsubscribe.complete();\n    }\n  }, {\n    key: \"ngxMaterialTimepickerTheme\",\n    set: function set(theme) {\n      console.warn(\"'ngxMaterialTimepickerTheme' is deprecated. Use 'theme' instead\");\n      this._ngxMaterialTimepickerTheme = theme;\n    }\n  }, {\n    key: \"format\",\n    set: function set(value) {\n      this._format = value === 24 ? 24 : 12;\n    },\n    get: function get() {\n      return this.timepickerInput ? this.timepickerInput.format : this._format;\n    }\n  }, {\n    key: \"minutesGap\",\n    set: function set(gap) {\n      if (gap == null) {\n        return;\n      }\n\n      gap = Math.floor(gap);\n      this._minutesGap = gap <= 59 ? gap : 1;\n    },\n    get: function get() {\n      return this._minutesGap;\n    }\n  }, {\n    key: \"minTime\",\n    get: function get() {\n      return this.timepickerInput ? this.timepickerInput.min : this.min;\n    }\n  }, {\n    key: \"maxTime\",\n    get: function get() {\n      return this.timepickerInput ? this.timepickerInput.max : this.max;\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this.timepickerInput && this.timepickerInput.disabled;\n    }\n  }, {\n    key: \"time\",\n    get: function get() {\n      return this.timepickerInput && this.timepickerInput.value;\n    }\n  }, {\n    key: \"inputElement\",\n    get: function get() {\n      return this.timepickerInput && this.timepickerInput.element;\n    }\n  }]);\n\n  return NgxMaterialTimepickerComponent;\n}();\n\nNgxMaterialTimepickerComponent.ctorParameters = function () {\n  return [{\n    type: NgxMaterialTimepickerEventService\n  }, {\n    type: DomService\n  }];\n};\n\n__decorate([Input()], NgxMaterialTimepickerComponent.prototype, \"cancelBtnTmpl\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerComponent.prototype, \"editableHintTmpl\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerComponent.prototype, \"confirmBtnTmpl\", void 0);\n\n__decorate([Input('ESC')], NgxMaterialTimepickerComponent.prototype, \"isEsc\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerComponent.prototype, \"enableKeyboardInput\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerComponent.prototype, \"preventOverlayClick\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerComponent.prototype, \"disableAnimation\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerComponent.prototype, \"appendToInput\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerComponent.prototype, \"hoursOnly\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerComponent.prototype, \"defaultTime\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerComponent.prototype, \"timepickerClass\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerComponent.prototype, \"theme\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerComponent.prototype, \"min\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerComponent.prototype, \"max\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerComponent.prototype, \"ngxMaterialTimepickerTheme\", null);\n\n__decorate([Input()], NgxMaterialTimepickerComponent.prototype, \"format\", null);\n\n__decorate([Input()], NgxMaterialTimepickerComponent.prototype, \"minutesGap\", null);\n\n__decorate([Output()], NgxMaterialTimepickerComponent.prototype, \"timeSet\", void 0);\n\n__decorate([Output()], NgxMaterialTimepickerComponent.prototype, \"opened\", void 0);\n\n__decorate([Output()], NgxMaterialTimepickerComponent.prototype, \"closed\", void 0);\n\n__decorate([Output()], NgxMaterialTimepickerComponent.prototype, \"hourSelected\", void 0);\n\n__decorate([Output()], NgxMaterialTimepickerComponent.prototype, \"timeChanged\", void 0);\n\nNgxMaterialTimepickerComponent = __decorate([Component({\n  selector: 'ngx-material-timepicker',\n  template: ''\n})], NgxMaterialTimepickerComponent);\n/* To override a default toggle icon */\n\nvar NgxMaterialTimepickerToggleIconDirective = function NgxMaterialTimepickerToggleIconDirective() {\n  _classCallCheck(this, NgxMaterialTimepickerToggleIconDirective);\n};\n\nNgxMaterialTimepickerToggleIconDirective = __decorate([Directive({\n  selector: '[ngxMaterialTimepickerToggleIcon]'\n})], NgxMaterialTimepickerToggleIconDirective);\n\nvar NgxMaterialTimepickerToggleComponent = /*#__PURE__*/function () {\n  function NgxMaterialTimepickerToggleComponent() {\n    _classCallCheck(this, NgxMaterialTimepickerToggleComponent);\n  }\n\n  _createClass(NgxMaterialTimepickerToggleComponent, [{\n    key: \"open\",\n    value: function open(event) {\n      if (this.timepicker) {\n        this.timepicker.open();\n        event.stopPropagation();\n      }\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\n    },\n    set: function set(value) {\n      this._disabled = value;\n    }\n  }]);\n\n  return NgxMaterialTimepickerToggleComponent;\n}();\n\n__decorate([Input('for')], NgxMaterialTimepickerToggleComponent.prototype, \"timepicker\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerToggleComponent.prototype, \"disabled\", null);\n\n__decorate([ContentChild(NgxMaterialTimepickerToggleIconDirective, {\n  static: true\n})], NgxMaterialTimepickerToggleComponent.prototype, \"customIcon\", void 0);\n\nNgxMaterialTimepickerToggleComponent = __decorate([Component({\n  selector: 'ngx-material-timepicker-toggle',\n  template: \"<button class=\\\"ngx-material-timepicker-toggle\\\" (click)=\\\"open($event)\\\" [disabled]=\\\"disabled\\\" type=\\\"button\\\">\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" *ngIf=\\\"!customIcon\\\">\\n        <path\\n            d=\\\"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\\\"/>\\n    </svg>\\n\\n    <ng-content select=\\\"[ngxMaterialTimepickerToggleIcon]\\\"></ng-content>\\n</button>\\n\",\n  styles: [\".ngx-material-timepicker-toggle{display:flex;justify-content:center;align-items:center;padding:4px;background-color:transparent;border-radius:50%;text-align:center;border:none;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:background-color .3s;cursor:pointer}.ngx-material-timepicker-toggle:focus{background-color:rgba(0,0,0,.07)}\"]\n})], NgxMaterialTimepickerToggleComponent);\nvar TimepickerDirective_1;\n\nvar TimepickerDirective = TimepickerDirective_1 = /*#__PURE__*/function () {\n  function TimepickerDirective(elementRef, locale) {\n    _classCallCheck(this, TimepickerDirective);\n\n    this.elementRef = elementRef;\n    this.locale = locale;\n    this._format = 12;\n    this._value = '';\n    this.timepickerSubscriptions = [];\n\n    this.onTouched = function () {};\n\n    this.onChange = function () {};\n  }\n\n  _createClass(TimepickerDirective, [{\n    key: \"updateValue\",\n    value: function updateValue(value) {\n      this.value = value;\n      this.onChange(value);\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes['value'] && changes['value'].currentValue) {\n        this.defaultTime = changes['value'].currentValue;\n      }\n    }\n  }, {\n    key: \"onClick\",\n    value: function onClick(event) {\n      if (!this.disableClick) {\n        this._timepicker.open();\n\n        event.stopPropagation();\n      }\n    }\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n\n      if (value) {\n        this.defaultTime = value;\n      }\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.timepickerSubscriptions.forEach(function (s) {\n        return s.unsubscribe();\n      });\n    }\n  }, {\n    key: \"registerTimepicker\",\n    value: function registerTimepicker(picker) {\n      var _this3 = this;\n\n      if (picker) {\n        this._timepicker = picker;\n\n        this._timepicker.registerInput(this);\n\n        this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe(function (time) {\n          _this3.value = time;\n\n          _this3.onChange(_this3.value);\n\n          _this3.onTouched();\n\n          _this3.defaultTime = _this3._value;\n        }));\n      } else {\n        throw new Error('NgxMaterialTimepickerComponent is not defined.' + ' Please make sure you passed the timepicker to ngxTimepicker directive');\n      }\n    }\n  }, {\n    key: \"updateInputValue\",\n    value: function updateInputValue() {\n      this.elementRef.nativeElement.value = this.value;\n    }\n  }, {\n    key: \"format\",\n    set: function set(value) {\n      this._format = value === 24 ? 24 : 12;\n      var isDynamicallyChanged = value && this.previousFormat && this.previousFormat !== this._format;\n\n      if (isDynamicallyChanged) {\n        this.value = this._value;\n\n        this._timepicker.updateTime(this._value);\n      }\n\n      this.previousFormat = this._format;\n    },\n    get: function get() {\n      return this._format;\n    }\n  }, {\n    key: \"min\",\n    set: function set(value) {\n      if (typeof value === 'string') {\n        this._min = TimeAdapter.parseTime(value, {\n          locale: this.locale,\n          format: this.format\n        });\n        return;\n      }\n\n      this._min = value;\n    },\n    get: function get() {\n      return this._min;\n    }\n  }, {\n    key: \"max\",\n    set: function set(value) {\n      if (typeof value === 'string') {\n        this._max = TimeAdapter.parseTime(value, {\n          locale: this.locale,\n          format: this.format\n        });\n        return;\n      }\n\n      this._max = value;\n    },\n    get: function get() {\n      return this._max;\n    }\n  }, {\n    key: \"timepicker\",\n    set: function set(picker) {\n      this.registerTimepicker(picker);\n    }\n  }, {\n    key: \"value\",\n    set: function set(value) {\n      if (!value) {\n        this._value = '';\n        this.updateInputValue();\n        return;\n      }\n\n      var time = TimeAdapter.formatTime(value, {\n        locale: this.locale,\n        format: this.format\n      });\n      var isAvailable = TimeAdapter.isTimeAvailable(time, this._min, this._max, 'minutes', this._timepicker.minutesGap, this._format);\n\n      if (isAvailable) {\n        this._value = time;\n        this.updateInputValue();\n        return;\n      }\n\n      console.warn('Selected time doesn\\'t match min or max value');\n    },\n    get: function get() {\n      if (!this._value) {\n        return '';\n      }\n\n      return TimeAdapter.toLocaleTimeString(this._value, {\n        format: this.format,\n        locale: this.locale\n      });\n    }\n  }, {\n    key: \"element\",\n    get: function get() {\n      return this.elementRef && this.elementRef.nativeElement;\n    }\n  }, {\n    key: \"defaultTime\",\n    set: function set(time) {\n      this._timepicker.defaultTime = TimeAdapter.formatTime(time, {\n        locale: this.locale,\n        format: this.format\n      });\n    }\n  }]);\n\n  return TimepickerDirective;\n}();\n\nTimepickerDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [TIME_LOCALE]\n    }]\n  }];\n};\n\n__decorate([Input()], TimepickerDirective.prototype, \"format\", null);\n\n__decorate([Input()], TimepickerDirective.prototype, \"min\", null);\n\n__decorate([Input()], TimepickerDirective.prototype, \"max\", null);\n\n__decorate([Input('ngxTimepicker')], TimepickerDirective.prototype, \"timepicker\", null);\n\n__decorate([Input()], TimepickerDirective.prototype, \"value\", null);\n\n__decorate([Input()], TimepickerDirective.prototype, \"disabled\", void 0);\n\n__decorate([Input()], TimepickerDirective.prototype, \"disableClick\", void 0);\n\n__decorate([HostListener('click', ['$event'])], TimepickerDirective.prototype, \"onClick\", null);\n\nTimepickerDirective = TimepickerDirective_1 = __decorate([Directive({\n  selector: '[ngxTimepicker]',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: TimepickerDirective_1,\n    multi: true\n  }],\n  host: {\n    '[disabled]': 'disabled',\n    '(change)': 'updateValue($event.target.value)',\n    '(blur)': 'onTouched()'\n  }\n}), __param(1, Inject(TIME_LOCALE))], TimepickerDirective);\n\nvar NgxMaterialTimepickerThemeDirective = /*#__PURE__*/function () {\n  function NgxMaterialTimepickerThemeDirective(elementRef) {\n    _classCallCheck(this, NgxMaterialTimepickerThemeDirective);\n\n    this.element = elementRef.nativeElement;\n  }\n\n  _createClass(NgxMaterialTimepickerThemeDirective, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      if (this.theme) {\n        this.setTheme(this.theme);\n      }\n    }\n  }, {\n    key: \"setTheme\",\n    value: function setTheme(theme) {\n      for (var val in theme) {\n        if (theme.hasOwnProperty(val)) {\n          if (typeof theme[val] === 'string') {\n            for (var prop in theme) {\n              if (theme.hasOwnProperty(prop)) {\n                this.element.style.setProperty(\"--\".concat(camelCaseToDash(prop)), theme[prop]);\n              }\n            }\n\n            return;\n          }\n\n          this.setTheme(theme[val]);\n        }\n      }\n    }\n  }]);\n\n  return NgxMaterialTimepickerThemeDirective;\n}();\n\nNgxMaterialTimepickerThemeDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\n__decorate([Input('ngxMaterialTimepickerTheme')], NgxMaterialTimepickerThemeDirective.prototype, \"theme\", void 0);\n\nNgxMaterialTimepickerThemeDirective = __decorate([Directive({\n  selector: '[ngxMaterialTimepickerTheme]'\n})], NgxMaterialTimepickerThemeDirective);\n\nfunction camelCaseToDash(myStr) {\n  return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n} // @dynamic\n\n\nvar TimepickerTimeUtils = /*#__PURE__*/function () {\n  function TimepickerTimeUtils() {\n    _classCallCheck(this, TimepickerTimeUtils);\n  }\n\n  _createClass(TimepickerTimeUtils, null, [{\n    key: \"getHours\",\n    value: function getHours(format) {\n      return Array(format).fill(1).map(function (v, i) {\n        var angleStep = 30;\n        var time = v + i;\n        var angle = angleStep * time;\n        return {\n          time: time === 24 ? 0 : time,\n          angle: angle\n        };\n      });\n    }\n  }, {\n    key: \"disableHours\",\n    value: function disableHours(hours, config) {\n      if (config.min || config.max) {\n        return hours.map(function (value) {\n          var hour = config.format === 24 ? value.time : TimeAdapter.formatHour(value.time, config.format, config.period);\n          var currentTime = DateTime.fromObject({\n            hour: hour\n          }).toFormat(TimeFormat.TWELVE);\n          return Object.assign({}, value, {\n            disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\n          });\n        });\n      }\n\n      return hours;\n    }\n  }, {\n    key: \"getMinutes\",\n    value: function getMinutes() {\n      var gap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var minutesCount = 60;\n      var angleStep = 360 / minutesCount;\n      var minutes = [];\n\n      for (var i = 0; i < minutesCount; i++) {\n        var angle = angleStep * i;\n\n        if (i % gap === 0) {\n          minutes.push({\n            time: i,\n            angle: angle !== 0 ? angle : 360\n          });\n        }\n      }\n\n      return minutes;\n    }\n  }, {\n    key: \"disableMinutes\",\n    value: function disableMinutes(minutes, selectedHour, config) {\n      if (config.min || config.max) {\n        var hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\n        return minutes.map(function (value) {\n          var currentTime = DateTime.fromObject({\n            hour: hour,\n            minute: value.time\n          }).toFormat(TimeFormat.TWELVE);\n          return Object.assign({}, value, {\n            disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\n          });\n        });\n      }\n\n      return minutes;\n    }\n  }]);\n\n  return TimepickerTimeUtils;\n}();\n\nvar NgxMaterialTimepickerHoursFace = /*#__PURE__*/function () {\n  function NgxMaterialTimepickerHoursFace(format) {\n    _classCallCheck(this, NgxMaterialTimepickerHoursFace);\n\n    this.hourChange = new EventEmitter();\n    this.hourSelected = new EventEmitter();\n    this.hoursList = [];\n    this.hoursList = TimepickerTimeUtils.getHours(format);\n  }\n\n  _createClass(NgxMaterialTimepickerHoursFace, [{\n    key: \"onTimeSelected\",\n    value: function onTimeSelected(time) {\n      this.hourSelected.next(time);\n    }\n  }]);\n\n  return NgxMaterialTimepickerHoursFace;\n}();\n\n__decorate([Input()], NgxMaterialTimepickerHoursFace.prototype, \"selectedHour\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerHoursFace.prototype, \"minTime\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerHoursFace.prototype, \"maxTime\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerHoursFace.prototype, \"format\", void 0);\n\n__decorate([Output()], NgxMaterialTimepickerHoursFace.prototype, \"hourChange\", void 0);\n\n__decorate([Output()], NgxMaterialTimepickerHoursFace.prototype, \"hourSelected\", void 0);\n\nvar NgxMaterialTimepicker24HoursFaceComponent = /*#__PURE__*/function (_NgxMaterialTimepicke) {\n  _inherits(NgxMaterialTimepicker24HoursFaceComponent, _NgxMaterialTimepicke);\n\n  var _super = _createSuper(NgxMaterialTimepicker24HoursFaceComponent);\n\n  function NgxMaterialTimepicker24HoursFaceComponent() {\n    _classCallCheck(this, NgxMaterialTimepicker24HoursFaceComponent);\n\n    return _super.call(this, 24);\n  }\n\n  _createClass(NgxMaterialTimepicker24HoursFaceComponent, [{\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n        min: this.minTime,\n        max: this.maxTime,\n        format: this.format\n      });\n    }\n  }]);\n\n  return NgxMaterialTimepicker24HoursFaceComponent;\n}(NgxMaterialTimepickerHoursFace);\n\nNgxMaterialTimepicker24HoursFaceComponent = __decorate([Component({\n  selector: 'ngx-material-timepicker-24-hours-face',\n  template: \"<ngx-material-timepicker-face [selectedTime]=\\\"selectedHour\\\" [faceTime]=\\\"hoursList\\\" [format]=\\\"format\\\"\\n                              (timeChange)=\\\"hourChange.next($event)\\\"\\n                              (timeSelected)=\\\"onTimeSelected($event)\\\"></ngx-material-timepicker-face>\\n\",\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], NgxMaterialTimepicker24HoursFaceComponent);\n\nvar NgxMaterialTimepicker12HoursFaceComponent = /*#__PURE__*/function (_NgxMaterialTimepicke2) {\n  _inherits(NgxMaterialTimepicker12HoursFaceComponent, _NgxMaterialTimepicke2);\n\n  var _super2 = _createSuper(NgxMaterialTimepicker12HoursFaceComponent);\n\n  function NgxMaterialTimepicker12HoursFaceComponent() {\n    _classCallCheck(this, NgxMaterialTimepicker12HoursFaceComponent);\n\n    return _super2.call(this, 12);\n  }\n\n  _createClass(NgxMaterialTimepicker12HoursFaceComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes['period'] && changes['period'].currentValue) {\n        this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n          min: this.minTime,\n          max: this.maxTime,\n          format: this.format,\n          period: this.period\n        });\n      }\n    }\n  }]);\n\n  return NgxMaterialTimepicker12HoursFaceComponent;\n}(NgxMaterialTimepickerHoursFace);\n\n__decorate([Input()], NgxMaterialTimepicker12HoursFaceComponent.prototype, \"period\", void 0);\n\nNgxMaterialTimepicker12HoursFaceComponent = __decorate([Component({\n  selector: 'ngx-material-timepicker-12-hours-face',\n  template: \"<ngx-material-timepicker-face [selectedTime]=\\\"selectedHour\\\" [faceTime]=\\\"hoursList\\\"\\n                              (timeChange)=\\\"hourChange.next($event)\\\" (timeSelected)=\\\"onTimeSelected($event)\\\"></ngx-material-timepicker-face>\\n\",\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], NgxMaterialTimepicker12HoursFaceComponent);\n\nvar NgxMaterialTimepickerMinutesFaceComponent = /*#__PURE__*/function () {\n  function NgxMaterialTimepickerMinutesFaceComponent() {\n    _classCallCheck(this, NgxMaterialTimepickerMinutesFaceComponent);\n\n    this.minutesList = [];\n    this.timeUnit = TimeUnit;\n    this.minuteChange = new EventEmitter();\n  }\n\n  _createClass(NgxMaterialTimepickerMinutesFaceComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes['period'] && changes['period'].currentValue) {\n        var minutes = TimepickerTimeUtils.getMinutes(this.minutesGap);\n        this.minutesList = TimepickerTimeUtils.disableMinutes(minutes, this.selectedHour, {\n          min: this.minTime,\n          max: this.maxTime,\n          format: this.format,\n          period: this.period\n        });\n      }\n    }\n  }]);\n\n  return NgxMaterialTimepickerMinutesFaceComponent;\n}();\n\n__decorate([Input()], NgxMaterialTimepickerMinutesFaceComponent.prototype, \"selectedMinute\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerMinutesFaceComponent.prototype, \"selectedHour\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerMinutesFaceComponent.prototype, \"period\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerMinutesFaceComponent.prototype, \"minTime\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerMinutesFaceComponent.prototype, \"maxTime\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerMinutesFaceComponent.prototype, \"format\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerMinutesFaceComponent.prototype, \"minutesGap\", void 0);\n\n__decorate([Output()], NgxMaterialTimepickerMinutesFaceComponent.prototype, \"minuteChange\", void 0);\n\nNgxMaterialTimepickerMinutesFaceComponent = __decorate([Component({\n  selector: 'ngx-material-timepicker-minutes-face',\n  template: \"<ngx-material-timepicker-face [faceTime]=\\\"minutesList\\\" [selectedTime]=\\\"selectedMinute\\\"\\n                              [minutesGap]=\\\"minutesGap\\\"\\n                              (timeChange)=\\\"minuteChange.next($event)\\\" [unit]=\\\"timeUnit.MINUTE\\\"></ngx-material-timepicker-face>\\n\"\n})], NgxMaterialTimepickerMinutesFaceComponent);\nvar CLOCK_HAND_STYLES = {\n  small: {\n    height: '75px',\n    top: 'calc(50% - 75px)'\n  },\n  large: {\n    height: '103px',\n    top: 'calc(50% - 103px)'\n  }\n};\n\nvar NgxMaterialTimepickerFaceComponent = /*#__PURE__*/function () {\n  function NgxMaterialTimepickerFaceComponent() {\n    _classCallCheck(this, NgxMaterialTimepickerFaceComponent);\n\n    this.timeUnit = TimeUnit;\n    this.innerClockFaceSize = 85;\n    this.timeChange = new EventEmitter();\n    this.timeSelected = new EventEmitter();\n  }\n\n  _createClass(NgxMaterialTimepickerFaceComponent, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this.setClockHandPosition();\n      this.addTouchEvents();\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var _this4 = this;\n\n      var faceTimeChanges = changes['faceTime'];\n      var selectedTimeChanges = changes['selectedTime'];\n\n      if (faceTimeChanges && faceTimeChanges.currentValue && selectedTimeChanges && selectedTimeChanges.currentValue) {\n        /* Set time according to passed an input value */\n        this.selectedTime = this.faceTime.find(function (time) {\n          return time.time === _this4.selectedTime.time;\n        });\n      }\n\n      if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n        this.setClockHandPosition();\n      }\n\n      if (faceTimeChanges && faceTimeChanges.currentValue) {\n        // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n        setTimeout(function () {\n          return _this4.selectAvailableTime();\n        });\n      }\n    }\n  }, {\n    key: \"trackByTime\",\n    value: function trackByTime(_, time) {\n      return time.time;\n    }\n  }, {\n    key: \"onMousedown\",\n    value: function onMousedown(e) {\n      e.preventDefault();\n      this.isStarted = true;\n    }\n  }, {\n    key: \"selectTime\",\n    value: function selectTime(e) {\n      if (!this.isStarted && e instanceof MouseEvent && e.type !== 'click') {\n        return;\n      }\n\n      var clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n      /* Get x0 and y0 of the circle */\n\n      var centerX = clockFaceCords.left + clockFaceCords.width / 2;\n      var centerY = clockFaceCords.top + clockFaceCords.height / 2;\n      /* Counting the arctangent and convert it to from radian to deg */\n\n      var arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n      /* Get angle according to quadrant */\n\n      var circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n      /* Check if selected time from the inner clock face (24 hours format only) */\n\n      var isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n      /* Round angle according to angle step */\n\n      var angleStep = this.unit === TimeUnit.MINUTE ? 6 * (this.minutesGap || 1) : 30;\n      var roundedAngle = roundAngle(circleAngle, angleStep);\n      var angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\n      var selectedTime = this.faceTime.find(function (val) {\n        return val.angle === angle;\n      });\n\n      if (selectedTime && !selectedTime.disabled) {\n        this.timeChange.next(selectedTime);\n        /* To let know whether user ended interaction with clock face */\n\n        if (!this.isStarted) {\n          this.timeSelected.next(selectedTime.time);\n        }\n      }\n    }\n  }, {\n    key: \"onMouseup\",\n    value: function onMouseup(e) {\n      e.preventDefault();\n      this.isStarted = false;\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.removeTouchEvents();\n    }\n  }, {\n    key: \"addTouchEvents\",\n    value: function addTouchEvents() {\n      this.touchStartHandler = this.onMousedown.bind(this);\n      this.touchEndHandler = this.onMouseup.bind(this);\n      this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\n      this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\n    }\n  }, {\n    key: \"removeTouchEvents\",\n    value: function removeTouchEvents() {\n      this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\n      this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\n    }\n  }, {\n    key: \"setClockHandPosition\",\n    value: function setClockHandPosition() {\n      if (this.format === 24) {\n        if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n          this.decreaseClockHand();\n        } else {\n          this.increaseClockHand();\n        }\n      }\n\n      this.clockHand.nativeElement.style.transform = \"rotate(\".concat(this.selectedTime.angle, \"deg)\");\n    }\n  }, {\n    key: \"selectAvailableTime\",\n    value: function selectAvailableTime() {\n      var _this5 = this;\n\n      var currentTime = this.faceTime.find(function (time) {\n        return _this5.selectedTime.time === time.time;\n      });\n      this.isClockFaceDisabled = this.faceTime.every(function (time) {\n        return time.disabled;\n      });\n\n      if (currentTime && currentTime.disabled && !this.isClockFaceDisabled) {\n        var availableTime = this.faceTime.find(function (time) {\n          return !time.disabled;\n        });\n        this.timeChange.next(availableTime);\n      }\n    }\n  }, {\n    key: \"isInnerClockFace\",\n    value: function isInnerClockFace(x0, y0, x, y) {\n      /* Detect whether time from the inner clock face or not (24 format only) */\n      return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n    }\n  }, {\n    key: \"decreaseClockHand\",\n    value: function decreaseClockHand() {\n      this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n      this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n    }\n  }, {\n    key: \"increaseClockHand\",\n    value: function increaseClockHand() {\n      this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n      this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n    }\n  }]);\n\n  return NgxMaterialTimepickerFaceComponent;\n}();\n\n__decorate([Input()], NgxMaterialTimepickerFaceComponent.prototype, \"faceTime\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerFaceComponent.prototype, \"selectedTime\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerFaceComponent.prototype, \"unit\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerFaceComponent.prototype, \"format\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerFaceComponent.prototype, \"minutesGap\", void 0);\n\n__decorate([Output()], NgxMaterialTimepickerFaceComponent.prototype, \"timeChange\", void 0);\n\n__decorate([Output()], NgxMaterialTimepickerFaceComponent.prototype, \"timeSelected\", void 0);\n\n__decorate([ViewChild('clockFace', {\n  static: true\n})], NgxMaterialTimepickerFaceComponent.prototype, \"clockFace\", void 0);\n\n__decorate([ViewChild('clockHand', {\n  static: true\n})], NgxMaterialTimepickerFaceComponent.prototype, \"clockHand\", void 0);\n\n__decorate([HostListener('mousedown', ['$event'])], NgxMaterialTimepickerFaceComponent.prototype, \"onMousedown\", null);\n\n__decorate([HostListener('click', ['$event']), HostListener('touchmove', ['$event.changedTouches[0]']), HostListener('touchend', ['$event.changedTouches[0]']), HostListener('mousemove', ['$event'])], NgxMaterialTimepickerFaceComponent.prototype, \"selectTime\", null);\n\n__decorate([HostListener('mouseup', ['$event'])], NgxMaterialTimepickerFaceComponent.prototype, \"onMouseup\", null);\n\nNgxMaterialTimepickerFaceComponent = __decorate([Component({\n  selector: 'ngx-material-timepicker-face',\n  template: \"<div class=\\\"clock-face\\\" #clockFace>\\n    <div *ngIf=\\\"unit !== timeUnit.MINUTE;else minutesFace\\\" class=\\\"clock-face__container\\\">\\n        <div class=\\\"clock-face__number clock-face__number--outer\\\"\\n             [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg) translateX(-50%)'}\\\"\\n             *ngFor=\\\"let time of faceTime | slice: 0 : 12; trackBy: trackByTime\\\">\\n\\t\\t\\t<span [ngStyle]=\\\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\\\"\\n                  [ngClass]=\\\"{'active': time.time | activeHour: selectedTime.time : isClockFaceDisabled,\\n                   'disabled': time.disabled}\\\">\\n                {{time.time | timeLocalizer: timeUnit.HOUR}}\\n            </span>\\n        </div>\\n        <div class=\\\"clock-face__inner\\\" *ngIf=\\\"faceTime.length > 12\\\"\\n             [style.top]=\\\"'calc(50% - ' + innerClockFaceSize + 'px)'\\\">\\n            <div class=\\\"clock-face__number clock-face__number--inner\\\"\\n                 [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg) translateX(-50%)'}\\\"\\n                 [style.height.px]=\\\"innerClockFaceSize\\\"\\n                 *ngFor=\\\"let time of faceTime | slice: 12 : 24; trackBy: trackByTime\\\">\\n\\t\\t\\t<span [ngStyle]=\\\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\\\"\\n                  [ngClass]=\\\"{'active': time.time | activeHour: selectedTime?.time : isClockFaceDisabled,\\n                   'disabled': time.disabled}\\\">\\n                {{time.time | timeLocalizer: timeUnit.HOUR}}</span>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <span class=\\\"clock-face__clock-hand\\\" [ngClass]=\\\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\\\"\\n          #clockHand [hidden]=\\\"isClockFaceDisabled\\\"></span>\\n</div>\\n<ng-template #minutesFace>\\n    <div class=\\\"clock-face__container\\\">\\n        <div class=\\\"clock-face__number clock-face__number--outer\\\"\\n             [ngStyle]=\\\"{'transform': 'rotateZ('+ time.angle +'deg) translateX(-50%)'}\\\"\\n             *ngFor=\\\"let time of faceTime; trackBy: trackByTime\\\">\\n\\t<span [ngStyle]=\\\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\\\"\\n          [ngClass]=\\\"{'active': time.time | activeMinute: selectedTime?.time:minutesGap:isClockFaceDisabled,\\n           'disabled': time.disabled}\\\">\\n\\t{{time.time | minutesFormatter: minutesGap | timeLocalizer: timeUnit.MINUTE}}</span>\\n        </div>\\n    </div>\\n</ng-template>\\n\",\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styles: [\".clock-face{width:290px;height:290px;border-radius:50%;position:relative;display:flex;justify-content:center;padding:20px;box-sizing:border-box;background-color:#f0f0f0}@supports (background-color:var(--clock-face-background-color)){.clock-face{background-color:var(--clock-face-background-color)}}.clock-face__inner{position:absolute}.clock-face__container{margin-left:-2px}.clock-face__number{position:absolute;transform-origin:0 100%;width:50px;text-align:center;z-index:2}.clock-face__number--outer{height:calc(290px / 2 - 20px)}.clock-face__number--outer>span{font-size:16px;color:#6c6c6c}@supports (color:var(--clock-face-time-inactive-color)){.clock-face__number--outer>span{color:var(--clock-face-time-inactive-color)}}.clock-face__number--inner>span{font-size:14px;color:#929292}@supports (color:var(--clock-face-inner-time-inactive-color)){.clock-face__number--inner>span{color:var(--clock-face-inner-time-inactive-color)}}.clock-face__number>span{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:30px;height:30px;display:flex;justify-content:center;align-items:center;margin:auto;border-radius:50%;font-weight:500;font-family:Roboto,sans-serif}@supports (font-family:var(--primary-font-family)){.clock-face__number>span{font-family:var(--primary-font-family)}}.clock-face__number>span.active{background-color:#00bfff;color:#fff}@supports (background-color:var(--clock-hand-color)){.clock-face__number>span.active{background-color:var(--clock-hand-color);color:var(--clock-face-time-active-color)}}.clock-face__number>span.disabled{color:#c5c5c5}@supports (color:var(--clock-face-time-disabled-color)){.clock-face__number>span.disabled{color:var(--clock-face-time-disabled-color)}}.clock-face__clock-hand{height:103px;width:2px;transform-origin:0 100%;position:absolute;top:calc(50% - 103px);z-index:1;background-color:#00bfff}@supports (background-color:var(--clock-hand-color)){.clock-face__clock-hand{background-color:var(--clock-hand-color)}}.clock-face__clock-hand:after{content:'';width:7px;height:7px;border-radius:50%;background-color:inherit;position:absolute;bottom:-3px;left:-3.5px}.clock-face__clock-hand_minute:before{content:'';width:7px;height:7px;background-color:#fff;border-radius:50%;position:absolute;top:-8px;left:calc(50% - 8px);box-sizing:content-box;border:4px solid #00bfff}@supports (border-color:var(--clock-hand-color)){.clock-face__clock-hand_minute:before{border-color:var(--clock-hand-color)}}@media (max-device-width:1023px) and (orientation:landscape){.clock-face{width:225px;height:225px;padding:5px}.clock-face__number--outer{height:calc(225px / 2 - 5px)}.clock-face__clock-hand_minute:before{top:0}}\"]\n})], NgxMaterialTimepickerFaceComponent);\n\nfunction roundAngle(angle, step) {\n  return Math.round(angle / step) * step;\n}\n\nfunction countAngleByCords(x0, y0, x, y, currentAngle) {\n  if (y > y0 && x >= x0) {\n    // II quarter\n    return 180 - currentAngle;\n  } else if (y > y0 && x < x0) {\n    // III quarter\n    return 180 + currentAngle;\n  } else if (y < y0 && x < x0) {\n    // IV quarter\n    return 360 - currentAngle;\n  } else {\n    // I quarter\n    return currentAngle;\n  }\n}\n\nvar NgxMaterialTimepickerButtonComponent = function NgxMaterialTimepickerButtonComponent() {\n  _classCallCheck(this, NgxMaterialTimepickerButtonComponent);\n};\n\nNgxMaterialTimepickerButtonComponent = __decorate([Component({\n  selector: 'ngx-material-timepicker-button',\n  template: \"<button class=\\\"timepicker-button\\\" type=\\\"button\\\">\\n  <span><ng-content></ng-content></span>\\n</button>\\n\",\n  styles: [\".timepicker-button{display:inline-block;height:36px;min-width:88px;line-height:36px;border:12px;border-radius:2px;background-color:transparent;text-align:center;transition:450ms cubic-bezier(.23,1,.32,1);overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;cursor:pointer;outline:0;color:#00bfff}@supports (color:var(--button-color)){.timepicker-button{color:var(--button-color)}}.timepicker-button:focus,.timepicker-button:hover{background-color:rgba(153,153,153,.2)}.timepicker-button>span{font-size:14px;text-transform:uppercase;font-weight:600;padding-left:16px;padding-right:16px;font-family:Roboto,sans-serif}@supports (font-family:var(--primary-font-family)){.timepicker-button>span{font-family:var(--primary-font-family)}}\"]\n})], NgxMaterialTimepickerButtonComponent);\n\nvar NgxMaterialTimepickerDialComponent = /*#__PURE__*/function () {\n  function NgxMaterialTimepickerDialComponent(locale) {\n    _classCallCheck(this, NgxMaterialTimepickerDialComponent);\n\n    this.locale = locale;\n    this.timeUnit = TimeUnit;\n    this.meridiems = Info.meridiems({\n      locale: this.locale\n    });\n    this.periodChanged = new EventEmitter();\n    this.timeUnitChanged = new EventEmitter();\n    this.hourChanged = new EventEmitter();\n    this.minuteChanged = new EventEmitter();\n  }\n\n  _createClass(NgxMaterialTimepickerDialComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes['period'] && changes['period'].currentValue || changes['format'] && changes['format'].currentValue) {\n        var hours = TimepickerTimeUtils.getHours(this.format);\n        this.hours = TimepickerTimeUtils.disableHours(hours, {\n          min: this.minTime,\n          max: this.maxTime,\n          format: this.format,\n          period: this.period\n        });\n      }\n\n      if (changes['period'] && changes['period'].currentValue || changes['hour'] && changes['hour'].currentValue) {\n        var minutes = TimepickerTimeUtils.getMinutes(this.minutesGap);\n        this.minutes = TimepickerTimeUtils.disableMinutes(minutes, +this.hour, {\n          min: this.minTime,\n          max: this.maxTime,\n          format: this.format,\n          period: this.period\n        });\n      }\n    }\n  }, {\n    key: \"changeTimeUnit\",\n    value: function changeTimeUnit(unit) {\n      this.timeUnitChanged.next(unit);\n    }\n  }, {\n    key: \"changePeriod\",\n    value: function changePeriod(period) {\n      this.periodChanged.next(period);\n    }\n  }, {\n    key: \"changeHour\",\n    value: function changeHour(hour) {\n      this.hourChanged.next(hour);\n    }\n  }, {\n    key: \"changeMinute\",\n    value: function changeMinute(minute) {\n      this.minuteChanged.next(minute);\n    }\n  }, {\n    key: \"showHint\",\n    value: function showHint() {\n      this.isHintVisible = true;\n    }\n  }, {\n    key: \"hideHint\",\n    value: function hideHint() {\n      this.isHintVisible = false;\n    }\n  }]);\n\n  return NgxMaterialTimepickerDialComponent;\n}();\n\nNgxMaterialTimepickerDialComponent.ctorParameters = function () {\n  return [{\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [TIME_LOCALE]\n    }]\n  }];\n};\n\n__decorate([Input()], NgxMaterialTimepickerDialComponent.prototype, \"editableHintTmpl\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerDialComponent.prototype, \"hour\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerDialComponent.prototype, \"minute\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerDialComponent.prototype, \"format\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerDialComponent.prototype, \"period\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerDialComponent.prototype, \"activeTimeUnit\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerDialComponent.prototype, \"minTime\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerDialComponent.prototype, \"maxTime\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerDialComponent.prototype, \"isEditable\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerDialComponent.prototype, \"minutesGap\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerDialComponent.prototype, \"hoursOnly\", void 0);\n\n__decorate([Output()], NgxMaterialTimepickerDialComponent.prototype, \"periodChanged\", void 0);\n\n__decorate([Output()], NgxMaterialTimepickerDialComponent.prototype, \"timeUnitChanged\", void 0);\n\n__decorate([Output()], NgxMaterialTimepickerDialComponent.prototype, \"hourChanged\", void 0);\n\n__decorate([Output()], NgxMaterialTimepickerDialComponent.prototype, \"minuteChanged\", void 0);\n\nNgxMaterialTimepickerDialComponent = __decorate([Component({\n  selector: 'ngx-material-timepicker-dial',\n  template: \"<div class=\\\"timepicker-dial\\\">\\n    <div class=\\\"timepicker-dial__container\\\">\\n        <div class=\\\"timepicker-dial__time\\\">\\n            <ngx-material-timepicker-dial-control [timeList]=\\\"hours\\\" [time]=\\\"hour\\\" [timeUnit]=\\\"timeUnit.HOUR\\\"\\n                                                  [isActive]=\\\"activeTimeUnit === timeUnit.HOUR\\\"\\n                                                  [isEditable]=\\\"isEditable\\\"\\n                                                  (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\n                                                  (timeChanged)=\\\"changeHour($event)\\\"\\n                                                  (focused)=\\\"showHint()\\\"\\n                                                  (unfocused)=\\\"hideHint()\\\">\\n\\n            </ngx-material-timepicker-dial-control>\\n            <span>:</span>\\n            <ngx-material-timepicker-dial-control [timeList]=\\\"minutes\\\" [time]=\\\"minute\\\" [timeUnit]=\\\"timeUnit.MINUTE\\\"\\n                                                  [isActive]=\\\"activeTimeUnit === timeUnit.MINUTE\\\"\\n                                                  [isEditable]=\\\"isEditable\\\"\\n                                                  [minutesGap]=\\\"minutesGap\\\"\\n                                                  [disabled]=\\\"hoursOnly\\\"\\n                                                  (timeUnitChanged)=\\\"changeTimeUnit($event)\\\"\\n                                                  (timeChanged)=\\\"changeMinute($event)\\\"\\n                                                  (focused)=\\\"showHint()\\\"\\n                                                  (unfocused)=\\\"hideHint()\\\">\\n\\n            </ngx-material-timepicker-dial-control>\\n        </div>\\n        <ngx-material-timepicker-period class=\\\"timepicker-dial__period\\\"\\n                                        [ngClass]=\\\"{'timepicker-dial__period--hidden': format === 24}\\\"\\n                                        [selectedPeriod]=\\\"period\\\" [activeTimeUnit]=\\\"activeTimeUnit\\\"\\n                                        [maxTime]=\\\"maxTime\\\" [minTime]=\\\"minTime\\\" [format]=\\\"format\\\"\\n                                        [hours]=\\\"hours\\\" [minutes]=\\\"minutes\\\" [selectedHour]=\\\"hour\\\"\\n                                        [meridiems]=\\\"meridiems\\\"\\n                                        (periodChanged)=\\\"changePeriod($event)\\\"></ngx-material-timepicker-period>\\n    </div>\\n    <div *ngIf=\\\"isEditable || editableHintTmpl\\\" [ngClass]=\\\"{'timepicker-dial__hint-container--hidden': !isHintVisible}\\\">\\n        <!--suppress HtmlUnknownAttribute -->\\n        <ng-container *ngTemplateOutlet=\\\"editableHintTmpl ? editableHintTmpl : editableHintDefault\\\"></ng-container>\\n        <ng-template #editableHintDefault>\\n            <small class=\\\"timepicker-dial__hint\\\"> * use arrows (<span>&#8645;</span>) to change the time</small>\\n        </ng-template>\\n    </div>\\n</div>\\n\",\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styles: [\".timepicker-dial{text-align:right}.timepicker-dial__container{display:flex;align-items:center;justify-content:flex-end;-webkit-tap-highlight-color:transparent}.timepicker-dial__time{display:flex;align-items:baseline;line-height:normal;font-size:50px;color:rgba(255,255,255,.5);font-family:Roboto,sans-serif}@supports (font-family:var(--primary-font-family)){.timepicker-dial__time{font-family:var(--primary-font-family);color:var(--dial-inactive-color)}}.timepicker-dial__period{display:block;margin-left:10px}.timepicker-dial__hint-container--hidden,.timepicker-dial__period--hidden{visibility:hidden}.timepicker-dial__hint{display:inline-block;font-size:10px;color:#fff}@supports (color:var(--dial-active-color)){.timepicker-dial__hint{color:var(--dial-active-color)}}.timepicker-dial__hint span{font-size:14px}@media (max-device-width:1023px) and (orientation:landscape){.timepicker-dial__container{flex-direction:column}.timepicker-dial__period{margin-left:0}}\"]\n}), __param(0, Inject(TIME_LOCALE))], NgxMaterialTimepickerDialComponent);\n\nvar TimeParserPipe = /*#__PURE__*/function () {\n  function TimeParserPipe(locale) {\n    _classCallCheck(this, TimeParserPipe);\n\n    this.locale = locale;\n    this.numberingSystem = DateTime.local().setLocale(this.locale).resolvedLocaleOpts().numberingSystem;\n  }\n\n  _createClass(TimeParserPipe, [{\n    key: \"transform\",\n    value: function transform(time) {\n      var timeUnit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TimeUnit.HOUR;\n\n      if (time == null || time === '') {\n        return '';\n      }\n\n      if (!isNaN(+time)) {\n        return time;\n      }\n\n      if (timeUnit === TimeUnit.MINUTE) {\n        return this.parseTime(time, 'm', 'minute');\n      }\n\n      return this.parseTime(time, 'H', 'hour');\n    }\n  }, {\n    key: \"parseTime\",\n    value: function parseTime(time, format, timeMeasure) {\n      var parsedTime = DateTime.fromFormat(String(time), format, {\n        numberingSystem: this.numberingSystem\n      })[timeMeasure];\n\n      if (!isNaN(parsedTime)) {\n        return parsedTime;\n      }\n\n      throw new Error(\"Cannot parse time - \".concat(time));\n    }\n  }]);\n\n  return TimeParserPipe;\n}();\n\nTimeParserPipe.ctorParameters = function () {\n  return [{\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [TIME_LOCALE]\n    }]\n  }];\n};\n\nTimeParserPipe = __decorate([Pipe({\n  name: 'timeParser'\n}), Injectable(), __param(0, Inject(TIME_LOCALE))], TimeParserPipe);\n\nvar NgxMaterialTimepickerDialControlComponent = /*#__PURE__*/function () {\n  function NgxMaterialTimepickerDialControlComponent(timeParserPipe) {\n    _classCallCheck(this, NgxMaterialTimepickerDialControlComponent);\n\n    this.timeParserPipe = timeParserPipe;\n    this.timeUnitChanged = new EventEmitter();\n    this.timeChanged = new EventEmitter();\n    this.focused = new EventEmitter();\n    this.unfocused = new EventEmitter();\n  }\n\n  _createClass(NgxMaterialTimepickerDialControlComponent, [{\n    key: \"saveTimeAndChangeTimeUnit\",\n    value: function saveTimeAndChangeTimeUnit(event, unit) {\n      event.preventDefault();\n      this.previousTime = this.time;\n      this.timeUnitChanged.next(unit);\n      this.focused.next();\n    }\n  }, {\n    key: \"updateTime\",\n    value: function updateTime() {\n      var time = this.selectedTime;\n\n      if (time) {\n        this.timeChanged.next(time);\n        this.previousTime = time.time;\n      }\n    }\n  }, {\n    key: \"changeTimeByKeyboard\",\n    value: function changeTimeByKeyboard(e) {\n      var char = String.fromCharCode(e.keyCode);\n\n      if (isTimeDisabledToChange(this.time, char, this.timeList)) {\n        e.preventDefault();\n      }\n    }\n  }, {\n    key: \"onKeydown\",\n    value: function onKeydown(e) {\n      if (!isDigit(e)) {\n        e.preventDefault();\n      } else {\n        this.changeTimeByArrow(e.keyCode);\n      }\n    }\n  }, {\n    key: \"onModelChange\",\n    value: function onModelChange(value) {\n      this.time = this.timeParserPipe.transform(value, this.timeUnit).toString();\n    }\n  }, {\n    key: \"changeTimeByArrow\",\n    value: function changeTimeByArrow(keyCode) {\n      var ARROW_UP = 38;\n      var ARROW_DOWN = 40;\n      var time;\n\n      if (keyCode === ARROW_UP) {\n        time = String(+this.time + (this.minutesGap || 1));\n      } else if (keyCode === ARROW_DOWN) {\n        time = String(+this.time - (this.minutesGap || 1));\n      }\n\n      if (!isTimeUnavailable(time, this.timeList)) {\n        this.time = time;\n        this.updateTime();\n      }\n    }\n  }, {\n    key: \"selectedTime\",\n    get: function get() {\n      var _this6 = this;\n\n      if (!!this.time) {\n        return this.timeList.find(function (t) {\n          return t.time === +_this6.time;\n        });\n      }\n    }\n  }]);\n\n  return NgxMaterialTimepickerDialControlComponent;\n}();\n\nNgxMaterialTimepickerDialControlComponent.ctorParameters = function () {\n  return [{\n    type: TimeParserPipe\n  }];\n};\n\n__decorate([Input()], NgxMaterialTimepickerDialControlComponent.prototype, \"timeList\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerDialControlComponent.prototype, \"timeUnit\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerDialControlComponent.prototype, \"time\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerDialControlComponent.prototype, \"isActive\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerDialControlComponent.prototype, \"isEditable\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerDialControlComponent.prototype, \"minutesGap\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerDialControlComponent.prototype, \"disabled\", void 0);\n\n__decorate([Output()], NgxMaterialTimepickerDialControlComponent.prototype, \"timeUnitChanged\", void 0);\n\n__decorate([Output()], NgxMaterialTimepickerDialControlComponent.prototype, \"timeChanged\", void 0);\n\n__decorate([Output()], NgxMaterialTimepickerDialControlComponent.prototype, \"focused\", void 0);\n\n__decorate([Output()], NgxMaterialTimepickerDialControlComponent.prototype, \"unfocused\", void 0);\n\nNgxMaterialTimepickerDialControlComponent = __decorate([Component({\n  selector: 'ngx-material-timepicker-dial-control',\n  template: \"<!--suppress HtmlFormInputWithoutLabel, HtmlUnknownAttribute -->\\n<input class=\\\"timepicker-dial__control timepicker-dial__item\\\"\\n       [ngClass]=\\\"{'timepicker-dial__item_active': isActive}\\\"\\n       [ngModel]=\\\"time | timeLocalizer: timeUnit\\\"\\n       (ngModelChange)=\\\"time = $event\\\"\\n       [disabled]=\\\"disabled\\\"\\n       (input)=\\\"updateTime()\\\" (focus)=\\\"saveTimeAndChangeTimeUnit($event, timeUnit)\\\"\\n       readonly [timepickerAutofocus]=\\\"isActive\\\"\\n       *ngIf=\\\"!isEditable;else editableTemplate\\\">\\n\\n<ng-template #editableTemplate>\\n    <!--suppress HtmlFormInputWithoutLabel, HtmlUnknownAttribute -->\\n    <input class=\\\"timepicker-dial__control timepicker-dial__item timepicker-dial__control_editable\\\"\\n           [ngClass]=\\\"{'timepicker-dial__item_active': isActive}\\\"\\n           [ngModel]=\\\"time | timeParser: timeUnit | timeLocalizer: timeUnit : true\\\"\\n           (ngModelChange)=\\\"onModelChange($event)\\\"\\n           [disabled]=\\\"disabled\\\"\\n           (input)=\\\"updateTime()\\\" (focus)=\\\"saveTimeAndChangeTimeUnit($event, timeUnit)\\\"\\n           [timepickerAutofocus]=\\\"isActive\\\" (keydown)=\\\"onKeydown($event)\\\" (keypress)=\\\"changeTimeByKeyboard($event)\\\">\\n</ng-template>\\n\",\n  providers: [TimeParserPipe],\n  styles: [\".timepicker-dial__item{cursor:pointer;color:rgba(255,255,255,.5);font-family:Roboto,sans-serif}@supports (font-family:var(--primary-font-family)){.timepicker-dial__item{font-family:var(--primary-font-family);color:var(--dial-inactive-color)}}.timepicker-dial__item_active{color:#fff}@supports (color:var(--dial-active-color)){.timepicker-dial__item_active{color:var(--dial-active-color)}}.timepicker-dial__control{border:none;background-color:transparent;font-size:50px;width:60px;padding:0;border-radius:3px;text-align:right}.timepicker-dial__control_editable:focus{color:#00bfff;background-color:#fff;outline:#00bfff}@supports (color:var(--dial-editable-active-color)){.timepicker-dial__control_editable:focus{color:var(--dial-editable-active-color)}}@supports (background-color:var(--dial-editable-background-color)){.timepicker-dial__control_editable:focus{background-color:var(--dial-editable-background-color)}}@supports (outline:var(--dial-editable-active-color)){.timepicker-dial__control_editable:focus{outline:var(--dial-editable-active-color)}}.timepicker-dial__control:disabled{cursor:default}\"]\n})], NgxMaterialTimepickerDialControlComponent);\n\nfunction isTimeDisabledToChange(currentTime, nextTime, timeList) {\n  var isNumber = /\\d/.test(nextTime);\n\n  if (isNumber) {\n    var time = currentTime + nextTime;\n    return isTimeUnavailable(time, timeList);\n  }\n}\n\nfunction isTimeUnavailable(time, timeList) {\n  var selectedTime = timeList.find(function (value) {\n    return value.time === +time;\n  });\n  return !selectedTime || selectedTime && selectedTime.disabled;\n}\n\nvar NgxMaterialTimepickerPeriodComponent = /*#__PURE__*/function () {\n  function NgxMaterialTimepickerPeriodComponent() {\n    _classCallCheck(this, NgxMaterialTimepickerPeriodComponent);\n\n    this.timePeriod = TimePeriod;\n    this.isPeriodAvailable = true;\n    this.periodChanged = new EventEmitter();\n  }\n\n  _createClass(NgxMaterialTimepickerPeriodComponent, [{\n    key: \"changePeriod\",\n    value: function changePeriod(period) {\n      this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\n\n      if (this.isPeriodAvailable) {\n        this.periodChanged.next(period);\n      }\n    }\n  }, {\n    key: \"animationDone\",\n    value: function animationDone() {\n      this.isPeriodAvailable = true;\n    }\n  }, {\n    key: \"isSwitchPeriodAvailable\",\n    value: function isSwitchPeriodAvailable(period) {\n      var time = this.getDisabledTimeByPeriod(period);\n      return !time.every(function (t) {\n        return t.disabled;\n      });\n    }\n  }, {\n    key: \"getDisabledTimeByPeriod\",\n    value: function getDisabledTimeByPeriod(period) {\n      switch (this.activeTimeUnit) {\n        case TimeUnit.HOUR:\n          return TimepickerTimeUtils.disableHours(this.hours, {\n            min: this.minTime,\n            max: this.maxTime,\n            format: this.format,\n            period: period\n          });\n\n        case TimeUnit.MINUTE:\n          return TimepickerTimeUtils.disableMinutes(this.minutes, +this.selectedHour, {\n            min: this.minTime,\n            max: this.maxTime,\n            format: this.format,\n            period: period\n          });\n\n        default:\n          throw new Error('no such TimeUnit');\n      }\n    }\n  }]);\n\n  return NgxMaterialTimepickerPeriodComponent;\n}();\n\n__decorate([Input()], NgxMaterialTimepickerPeriodComponent.prototype, \"selectedPeriod\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerPeriodComponent.prototype, \"format\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerPeriodComponent.prototype, \"activeTimeUnit\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerPeriodComponent.prototype, \"hours\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerPeriodComponent.prototype, \"minutes\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerPeriodComponent.prototype, \"minTime\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerPeriodComponent.prototype, \"maxTime\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerPeriodComponent.prototype, \"selectedHour\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerPeriodComponent.prototype, \"meridiems\", void 0);\n\n__decorate([Output()], NgxMaterialTimepickerPeriodComponent.prototype, \"periodChanged\", void 0);\n\nNgxMaterialTimepickerPeriodComponent = __decorate([Component({\n  selector: 'ngx-material-timepicker-period',\n  template: \"<div class=\\\"timepicker-period\\\">\\n\\t\\t\\t<button class=\\\"timepicker-dial__item timepicker-period__btn\\\"\\n                  [ngClass]=\\\"{'timepicker-dial__item_active': selectedPeriod === timePeriod.AM}\\\"\\n                  (click)=\\\"changePeriod(timePeriod.AM)\\\"\\n                  type=\\\"button\\\">{{meridiems[0]}}</button>\\n    <button class=\\\"timepicker-dial__item timepicker-period__btn\\\"\\n          [ngClass]=\\\"{'timepicker-dial__item_active': selectedPeriod === timePeriod.PM}\\\"\\n          (click)=\\\"changePeriod(timePeriod.PM)\\\"\\n          type=\\\"button\\\">{{meridiems[1]}}</button>\\n    <div class=\\\"timepicker-period__warning\\\" [@scaleInOut] (@scaleInOut.done)=\\\"animationDone()\\\" *ngIf=\\\"!isPeriodAvailable\\\">\\n        <p>Current time would be invalid in this period.</p>\\n    </div>\\n</div>\\n\",\n  animations: [trigger('scaleInOut', [transition(':enter', [style({\n    transform: 'scale(0)'\n  }), animate('.2s', style({\n    transform: 'scale(1)'\n  })), sequence([animate('3s', style({\n    opacity: 1\n  })), animate('.3s', style({\n    opacity: 0\n  }))])])])],\n  styles: [\".timepicker-dial__item{cursor:pointer;color:rgba(255,255,255,.5);font-family:Roboto,sans-serif}@supports (font-family:var(--primary-font-family)){.timepicker-dial__item{font-family:var(--primary-font-family);color:var(--dial-inactive-color)}}.timepicker-dial__item_active{color:#fff}@supports (color:var(--dial-active-color)){.timepicker-dial__item_active{color:var(--dial-active-color)}}.timepicker-period{display:flex;flex-direction:column;position:relative}.timepicker-period__btn{padding:1px 3px;border:0;background-color:transparent;font-size:18px;font-weight:500;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:0;border-radius:3px;transition:background-color .5s;font-family:Roboto,sans-serif}.timepicker-period__btn:focus{background-color:rgba(0,0,0,.07)}.timepicker-period__warning{padding:5px 10px;border-radius:3px;background-color:rgba(0,0,0,.55);color:#fff;position:absolute;width:200px;left:-20px;top:40px}.timepicker-period__warning>p{margin:0;font-size:12px;font-family:Roboto,sans-serif}@supports (font-family:var(--primary-font-family)){.timepicker-period__btn,.timepicker-period__warning>p{font-family:var(--primary-font-family)}}\"]\n})], NgxMaterialTimepickerPeriodComponent);\n\nvar TimeFormatterPipe = /*#__PURE__*/function () {\n  function TimeFormatterPipe() {\n    _classCallCheck(this, TimeFormatterPipe);\n  }\n\n  _createClass(TimeFormatterPipe, [{\n    key: \"transform\",\n    value: function transform(time, timeUnit) {\n      if (time == null || time === '') {\n        return time;\n      }\n\n      switch (timeUnit) {\n        case TimeUnit.HOUR:\n          return DateTime.fromObject({\n            hour: +time\n          }).toFormat('HH');\n\n        case TimeUnit.MINUTE:\n          return DateTime.fromObject({\n            minute: +time\n          }).toFormat('mm');\n\n        default:\n          throw new Error('no such time unit');\n      }\n    }\n  }]);\n\n  return TimeFormatterPipe;\n}();\n\nTimeFormatterPipe = __decorate([Pipe({\n  name: 'timeFormatter'\n})], TimeFormatterPipe);\n\nvar OverlayDirective = /*#__PURE__*/function () {\n  function OverlayDirective(eventService) {\n    _classCallCheck(this, OverlayDirective);\n\n    this.eventService = eventService;\n  }\n\n  _createClass(OverlayDirective, [{\n    key: \"onClick\",\n    value: function onClick(e) {\n      if (!this.preventClick) {\n        this.eventService.dispatchEvent(e);\n      }\n\n      e.preventDefault();\n    }\n  }]);\n\n  return OverlayDirective;\n}();\n\nOverlayDirective.ctorParameters = function () {\n  return [{\n    type: NgxMaterialTimepickerEventService\n  }];\n};\n\n__decorate([Input('overlay')], OverlayDirective.prototype, \"preventClick\", void 0);\n\n__decorate([HostListener('click', ['$event'])], OverlayDirective.prototype, \"onClick\", null);\n\nOverlayDirective = __decorate([Directive({\n  selector: '[overlay]'\n})], OverlayDirective);\n\nvar MinutesFormatterPipe = /*#__PURE__*/function () {\n  function MinutesFormatterPipe() {\n    _classCallCheck(this, MinutesFormatterPipe);\n  }\n\n  _createClass(MinutesFormatterPipe, [{\n    key: \"transform\",\n    value: function transform(minute) {\n      var gap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n\n      if (!minute) {\n        return minute;\n      }\n\n      return minute % gap === 0 ? minute : '';\n    }\n  }]);\n\n  return MinutesFormatterPipe;\n}();\n\nMinutesFormatterPipe = __decorate([Pipe({\n  name: 'minutesFormatter'\n})], MinutesFormatterPipe);\n\nvar AutofocusDirective = /*#__PURE__*/function () {\n  function AutofocusDirective(element, document) {\n    _classCallCheck(this, AutofocusDirective);\n\n    this.element = element;\n    this.document = document;\n    this.activeElement = this.document.activeElement;\n  }\n\n  _createClass(AutofocusDirective, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges() {\n      var _this7 = this;\n\n      if (this.isFocusActive) {\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n        setTimeout(function () {\n          return _this7.element.nativeElement.focus({\n            preventScroll: true\n          });\n        });\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this8 = this;\n\n      // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n      setTimeout(function () {\n        return _this8.activeElement.focus({\n          preventScroll: true\n        });\n      });\n    }\n  }]);\n\n  return AutofocusDirective;\n}();\n\nAutofocusDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n__decorate([Input('timepickerAutofocus')], AutofocusDirective.prototype, \"isFocusActive\", void 0);\n\nAutofocusDirective = __decorate([Directive({\n  selector: '[timepickerAutofocus]'\n}), __param(1, Optional()), __param(1, Inject(DOCUMENT))], AutofocusDirective);\nvar NgxTimepickerFieldComponent_1;\n\nvar NgxTimepickerFieldComponent = NgxTimepickerFieldComponent_1 = /*#__PURE__*/function () {\n  function NgxTimepickerFieldComponent(timepickerService, locale) {\n    _classCallCheck(this, NgxTimepickerFieldComponent);\n\n    this.timepickerService = timepickerService;\n    this.locale = locale;\n    this.minHour = 1;\n    this.maxHour = 12;\n    this.timeUnit = TimeUnit;\n    this.buttonAlign = 'right';\n    this.timeChanged = new EventEmitter();\n    this._format = 12;\n    this.unsubscribe$ = new Subject();\n    this.isFirstTimeChange = true;\n\n    this.onChange = function () {};\n  }\n\n  _createClass(NgxTimepickerFieldComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this9 = this;\n\n      this.initTime(this.defaultTime);\n      this.hoursList = TimepickerTimeUtils.getHours(this._format);\n      this.minutesList = TimepickerTimeUtils.getMinutes();\n      this.isTimeRangeSet = !!(this.min || this.max);\n      this.hour$ = this.timepickerService.selectedHour.pipe(tap(function (clockTime) {\n        return _this9.selectedHour = clockTime.time;\n      }), map(this.changeDefaultTimeValue.bind(this)), tap(function () {\n        return _this9.isTimeRangeSet && _this9.updateAvailableMinutes();\n      }));\n      this.minute$ = this.timepickerService.selectedMinute.pipe(map(this.changeDefaultTimeValue.bind(this)), tap(function () {\n        return _this9.isFirstTimeChange = false;\n      }));\n\n      if (this.format === 12) {\n        this.timepickerService.selectedPeriod.pipe(distinctUntilChanged(), tap(function (period) {\n          return _this9.period = period;\n        }), tap(function (period) {\n          return _this9.isChangePeriodDisabled = _this9.isPeriodDisabled(period);\n        }), takeUntil(this.unsubscribe$)).subscribe(function () {\n          return _this9.isTimeRangeSet && _this9.updateAvailableTime();\n        });\n      }\n    }\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(val) {\n      if (val) {\n        this.initTime(val);\n      } else {\n        this.resetTime();\n      }\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {}\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n  }, {\n    key: \"changeHour\",\n    value: function changeHour(hour) {\n      this.timepickerService.hour = this.hoursList.find(function (h) {\n        return h.time === hour;\n      });\n      this.changeTime();\n    }\n  }, {\n    key: \"changeMinute\",\n    value: function changeMinute(minute) {\n      this.timepickerService.minute = this.minutesList.find(function (m) {\n        return m.time === minute;\n      });\n      this.changeTime();\n    }\n  }, {\n    key: \"changePeriod\",\n    value: function changePeriod(period) {\n      this.timepickerService.period = period;\n      this.changeTime();\n    }\n  }, {\n    key: \"onTimeSet\",\n    value: function onTimeSet(time) {\n      this.updateTime(time);\n      this.emitLocalTimeChange(time);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.unsubscribe$.next();\n      this.unsubscribe$.complete();\n    }\n  }, {\n    key: \"changeTime\",\n    value: function changeTime() {\n      var time = this.timepickerService.getFullTime(this.format);\n      this.timepickerTime = time;\n      this.emitLocalTimeChange(time);\n    }\n  }, {\n    key: \"resetTime\",\n    value: function resetTime() {\n      this.timepickerService.hour = {\n        angle: 0,\n        time: null\n      };\n      this.timepickerService.minute = {\n        angle: 0,\n        time: null\n      };\n    }\n  }, {\n    key: \"emitLocalTimeChange\",\n    value: function emitLocalTimeChange(time) {\n      var localTime = TimeAdapter.toLocaleTimeString(time, {\n        format: this.format,\n        locale: this.locale\n      });\n      this.onChange(localTime);\n      this.timeChanged.emit(localTime);\n    }\n  }, {\n    key: \"changeDefaultTimeValue\",\n    value: function changeDefaultTimeValue(clockFaceTime) {\n      if (!this.isDefaultTime && this.isFirstTimeChange) {\n        return Object.assign({}, clockFaceTime, {\n          time: null\n        });\n      }\n\n      return clockFaceTime;\n    }\n  }, {\n    key: \"updateAvailableHours\",\n    value: function updateAvailableHours() {\n      this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n        min: this.min,\n        max: this.max,\n        format: this.format,\n        period: this.period\n      });\n    }\n  }, {\n    key: \"updateAvailableMinutes\",\n    value: function updateAvailableMinutes() {\n      this.minutesList = TimepickerTimeUtils.disableMinutes(this.minutesList, this.selectedHour, {\n        min: this.min,\n        max: this.max,\n        format: this.format,\n        period: this.period\n      });\n    }\n  }, {\n    key: \"updateAvailableTime\",\n    value: function updateAvailableTime() {\n      this.updateAvailableHours();\n\n      if (this.selectedHour) {\n        this.updateAvailableMinutes();\n      }\n    }\n  }, {\n    key: \"updateTime\",\n    value: function updateTime(time) {\n      if (time) {\n        var formattedTime = TimeAdapter.formatTime(time, {\n          locale: this.locale,\n          format: this.format\n        });\n        this.timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min, this.max, this.format);\n        this.timepickerTime = formattedTime;\n      }\n    }\n  }, {\n    key: \"initTime\",\n    value: function initTime(time) {\n      var isDefaultTimeAvailable = TimeAdapter.isTimeAvailable(time, this.min, this.max, 'minutes', null, this.format);\n\n      if (!isDefaultTimeAvailable) {\n        if (this.min) {\n          this.updateTime(TimeAdapter.fromDateTimeToString(this.min, this.format));\n          return;\n        }\n\n        if (this.max) {\n          this.updateTime(TimeAdapter.fromDateTimeToString(this.max, this.format));\n          return;\n        }\n      }\n\n      this.updateTime(time);\n    }\n  }, {\n    key: \"isPeriodDisabled\",\n    value: function isPeriodDisabled(period) {\n      return TimepickerTimeUtils.disableHours(TimepickerTimeUtils.getHours(12), {\n        min: this.min,\n        max: this.max,\n        format: 12,\n        period: period === TimePeriod.AM ? TimePeriod.PM : TimePeriod.AM\n      }).every(function (time) {\n        return time.disabled;\n      });\n    }\n  }, {\n    key: \"format\",\n    set: function set(value) {\n      this._format = value === 24 ? 24 : 12;\n      this.minHour = this._format === 12 ? 1 : 0;\n      this.maxHour = this._format === 12 ? 12 : 23;\n      this.hoursList = TimepickerTimeUtils.getHours(this._format);\n      var isDynamicallyChanged = value && this.previousFormat && this.previousFormat !== this._format;\n\n      if (isDynamicallyChanged) {\n        this.updateTime(this.timepickerTime);\n      }\n\n      this.previousFormat = this._format;\n    },\n    get: function get() {\n      return this._format;\n    }\n  }, {\n    key: \"min\",\n    set: function set(value) {\n      if (typeof value === 'string') {\n        this._min = TimeAdapter.parseTime(value, {\n          locale: this.locale,\n          format: this.format\n        });\n        return;\n      }\n\n      this._min = value;\n    },\n    get: function get() {\n      return this._min;\n    }\n  }, {\n    key: \"max\",\n    set: function set(value) {\n      if (typeof value === 'string') {\n        this._max = TimeAdapter.parseTime(value, {\n          locale: this.locale,\n          format: this.format\n        });\n        return;\n      }\n\n      this._max = value;\n    },\n    get: function get() {\n      return this._max;\n    }\n  }, {\n    key: \"defaultTime\",\n    set: function set(val) {\n      this._defaultTime = val;\n      this.isDefaultTime = !!val;\n    },\n    get: function get() {\n      return this._defaultTime;\n    }\n  }]);\n\n  return NgxTimepickerFieldComponent;\n}();\n\nNgxTimepickerFieldComponent.ctorParameters = function () {\n  return [{\n    type: NgxMaterialTimepickerService\n  }, {\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [TIME_LOCALE]\n    }]\n  }];\n};\n\n__decorate([Input()], NgxTimepickerFieldComponent.prototype, \"disabled\", void 0);\n\n__decorate([Input()], NgxTimepickerFieldComponent.prototype, \"toggleIcon\", void 0);\n\n__decorate([Input()], NgxTimepickerFieldComponent.prototype, \"buttonAlign\", void 0);\n\n__decorate([Input()], NgxTimepickerFieldComponent.prototype, \"clockTheme\", void 0);\n\n__decorate([Input()], NgxTimepickerFieldComponent.prototype, \"controlOnly\", void 0);\n\n__decorate([Input()], NgxTimepickerFieldComponent.prototype, \"cancelBtnTmpl\", void 0);\n\n__decorate([Input()], NgxTimepickerFieldComponent.prototype, \"confirmBtnTmpl\", void 0);\n\n__decorate([Input()], NgxTimepickerFieldComponent.prototype, \"format\", null);\n\n__decorate([Input()], NgxTimepickerFieldComponent.prototype, \"min\", null);\n\n__decorate([Input()], NgxTimepickerFieldComponent.prototype, \"max\", null);\n\n__decorate([Input()], NgxTimepickerFieldComponent.prototype, \"defaultTime\", null);\n\n__decorate([Output()], NgxTimepickerFieldComponent.prototype, \"timeChanged\", void 0);\n\nNgxTimepickerFieldComponent = NgxTimepickerFieldComponent_1 = __decorate([Component({\n  selector: 'ngx-timepicker-field',\n  template: \"<div class=\\\"ngx-timepicker\\\" [ngClass]=\\\"{'ngx-timepicker--disabled': disabled}\\\">\\n    <ngx-timepicker-time-control\\n        class=\\\"ngx-timepicker__control--first\\\"\\n        [placeholder]=\\\"'HH'\\\"\\n        [time]=\\\"(hour$ | async)?.time\\\"\\n        [min]=\\\"minHour\\\"\\n        [max]=\\\"maxHour\\\"\\n        [timeUnit]=\\\"timeUnit.HOUR\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [timeList]=\\\"hoursList\\\"\\n        [preventTyping]=\\\"isTimeRangeSet\\\"\\n        (timeChanged)=\\\"changeHour($event)\\\"></ngx-timepicker-time-control>\\n    <span class=\\\"ngx-timepicker__time-colon ngx-timepicker__control--second\\\">:</span>\\n    <ngx-timepicker-time-control\\n        class=\\\"ngx-timepicker__control--third\\\"\\n        [placeholder]=\\\"'MM'\\\"\\n        [time]=\\\"(minute$ | async)?.time\\\"\\n        [min]=\\\"0\\\"\\n        [max]=\\\"59\\\"\\n        [timeUnit]=\\\"timeUnit.MINUTE\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [timeList]=\\\"minutesList\\\"\\n        [preventTyping]=\\\"isTimeRangeSet\\\"\\n        (timeChanged)=\\\"changeMinute($event)\\\"></ngx-timepicker-time-control>\\n    <ngx-timepicker-period-selector\\n        class=\\\"ngx-timepicker__control--forth\\\"\\n        [selectedPeriod]=\\\"period\\\"\\n        [disabled]=\\\"disabled || isChangePeriodDisabled\\\"\\n        (periodSelected)=\\\"changePeriod($event)\\\"\\n        *ngIf=\\\"format !== 24\\\"></ngx-timepicker-period-selector>\\n    <ngx-material-timepicker-toggle\\n        class=\\\"ngx-timepicker__toggle\\\"\\n        *ngIf=\\\"!controlOnly\\\"\\n        [ngClass]=\\\"{'ngx-timepicker__toggle--left': buttonAlign === 'left'}\\\"\\n        [for]=\\\"timepicker\\\"\\n        [disabled]=\\\"disabled\\\">\\n        <span ngxMaterialTimepickerToggleIcon>\\n            <!--suppress HtmlUnknownAttribute -->\\n            <ng-container *ngTemplateOutlet=\\\"toggleIcon || defaultIcon\\\"></ng-container>\\n        </span>\\n    </ngx-material-timepicker-toggle>\\n</div>\\n<ngx-material-timepicker\\n    [min]=\\\"min\\\"\\n    [max]=\\\"max\\\"\\n    [theme]=\\\"clockTheme\\\"\\n    [defaultTime]=\\\"timepickerTime\\\"\\n    [format]=\\\"format\\\"\\n    [cancelBtnTmpl]=\\\"cancelBtnTmpl\\\"\\n    [confirmBtnTmpl]=\\\"confirmBtnTmpl\\\"\\n    (timeSet)=\\\"onTimeSet($event)\\\" #timepicker></ngx-material-timepicker>\\n\\n<ng-template #defaultIcon>\\n    <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\">\\n        <!--suppress CheckEmptyScriptTag -->\\n        <path\\n            d=\\\"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\\\"/>\\n    </svg>\\n</ng-template>\\n\",\n  providers: [NgxMaterialTimepickerService, {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: NgxTimepickerFieldComponent_1,\n    multi: true\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styles: [\".ngx-timepicker{display:flex;align-items:center;height:100%;border-bottom:1px solid rgba(0,0,0,.12)}.ngx-timepicker--disabled{background:rgba(0,0,0,.07);pointer-events:none}.ngx-timepicker__time-colon{margin-left:10px}.ngx-timepicker__control--first{order:1}.ngx-timepicker__control--second{order:2}.ngx-timepicker__control--third{order:3}.ngx-timepicker__control--forth,.ngx-timepicker__toggle{order:4}.ngx-timepicker__toggle--left{order:0}\"]\n}), __param(1, Inject(TIME_LOCALE))], NgxTimepickerFieldComponent);\n\nvar NgxTimepickerTimeControlComponent = /*#__PURE__*/function () {\n  function NgxTimepickerTimeControlComponent(timeParser) {\n    _classCallCheck(this, NgxTimepickerTimeControlComponent);\n\n    this.timeParser = timeParser;\n    this.timeChanged = new EventEmitter();\n  }\n\n  _createClass(NgxTimepickerTimeControlComponent, [{\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes.timeList && this.time != null) {\n        if (this.isSelectedTimeDisabled(this.time)) {\n          this.setAvailableTime();\n        }\n      }\n    }\n  }, {\n    key: \"changeTime\",\n    value: function changeTime(event) {\n      event.stopPropagation();\n      var char = String.fromCharCode(event.keyCode);\n      var time = concatTime(String(this.time), char);\n      this.changeTimeIfValid(time);\n    }\n  }, {\n    key: \"onKeydown\",\n    value: function onKeydown(event) {\n      event.stopPropagation();\n\n      if (!isDigit(event)) {\n        event.preventDefault();\n      }\n\n      switch (event.key) {\n        case 'ArrowUp':\n          this.increase();\n          break;\n\n        case 'ArrowDown':\n          this.decrease();\n          break;\n      }\n\n      if (this.preventTyping && event.key !== 'Tab') {\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"increase\",\n    value: function increase() {\n      if (!this.disabled) {\n        var nextTime = +this.time + 1;\n\n        if (nextTime > this.max) {\n          nextTime = this.min;\n        }\n\n        if (this.isSelectedTimeDisabled(nextTime)) {\n          nextTime = this.getAvailableTime(nextTime, this.getNextAvailableTime.bind(this));\n        }\n\n        if (nextTime !== this.time) {\n          this.timeChanged.emit(nextTime);\n        }\n      }\n    }\n  }, {\n    key: \"decrease\",\n    value: function decrease() {\n      if (!this.disabled) {\n        var previousTime = +this.time - 1;\n\n        if (previousTime < this.min) {\n          previousTime = this.max;\n        }\n\n        if (this.isSelectedTimeDisabled(previousTime)) {\n          previousTime = this.getAvailableTime(previousTime, this.getPrevAvailableTime.bind(this));\n        }\n\n        if (previousTime !== this.time) {\n          this.timeChanged.emit(previousTime);\n        }\n      }\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      this.isFocused = true;\n      this.previousTime = this.time;\n    }\n  }, {\n    key: \"onBlur\",\n    value: function onBlur() {\n      this.isFocused = false;\n\n      if (this.previousTime !== this.time) {\n        this.changeTimeIfValid(+this.time);\n      }\n    }\n  }, {\n    key: \"onModelChange\",\n    value: function onModelChange(value) {\n      this.time = +this.timeParser.transform(value, this.timeUnit);\n    }\n  }, {\n    key: \"changeTimeIfValid\",\n    value: function changeTimeIfValid(value) {\n      if (!isNaN(value)) {\n        this.time = value;\n\n        if (this.time > this.max) {\n          var timeString = String(value);\n          this.time = +timeString[timeString.length - 1];\n        }\n\n        if (this.time < this.min) {\n          this.time = this.min;\n        }\n\n        this.timeChanged.emit(this.time);\n      }\n    }\n  }, {\n    key: \"isSelectedTimeDisabled\",\n    value: function isSelectedTimeDisabled(time) {\n      return this.timeList.find(function (faceTime) {\n        return faceTime.time === time;\n      }).disabled;\n    }\n  }, {\n    key: \"getNextAvailableTime\",\n    value: function getNextAvailableTime(index) {\n      var timeCollection = this.timeList;\n      var maxValue = timeCollection.length;\n\n      for (var i = index + 1; i < maxValue; i++) {\n        var time = timeCollection[i];\n\n        if (!time.disabled) {\n          return time.time;\n        }\n      }\n    }\n  }, {\n    key: \"getPrevAvailableTime\",\n    value: function getPrevAvailableTime(index) {\n      for (var i = index; i >= 0; i--) {\n        var time = this.timeList[i];\n\n        if (!time.disabled) {\n          return time.time;\n        }\n      }\n    }\n  }, {\n    key: \"getAvailableTime\",\n    value: function getAvailableTime(currentTime, fn) {\n      var currentTimeIndex = this.timeList.findIndex(function (time) {\n        return time.time === currentTime;\n      });\n      var availableTime = fn(currentTimeIndex);\n      return availableTime != null ? availableTime : this.time;\n    }\n  }, {\n    key: \"setAvailableTime\",\n    value: function setAvailableTime() {\n      this.time = this.timeList.find(function (t) {\n        return !t.disabled;\n      }).time;\n      this.timeChanged.emit(this.time);\n    }\n  }]);\n\n  return NgxTimepickerTimeControlComponent;\n}();\n\nNgxTimepickerTimeControlComponent.ctorParameters = function () {\n  return [{\n    type: TimeParserPipe\n  }];\n};\n\n__decorate([Input()], NgxTimepickerTimeControlComponent.prototype, \"time\", void 0);\n\n__decorate([Input()], NgxTimepickerTimeControlComponent.prototype, \"min\", void 0);\n\n__decorate([Input()], NgxTimepickerTimeControlComponent.prototype, \"max\", void 0);\n\n__decorate([Input()], NgxTimepickerTimeControlComponent.prototype, \"placeholder\", void 0);\n\n__decorate([Input()], NgxTimepickerTimeControlComponent.prototype, \"timeUnit\", void 0);\n\n__decorate([Input()], NgxTimepickerTimeControlComponent.prototype, \"disabled\", void 0);\n\n__decorate([Input()], NgxTimepickerTimeControlComponent.prototype, \"timeList\", void 0);\n\n__decorate([Input()], NgxTimepickerTimeControlComponent.prototype, \"preventTyping\", void 0);\n\n__decorate([Output()], NgxTimepickerTimeControlComponent.prototype, \"timeChanged\", void 0);\n\nNgxTimepickerTimeControlComponent = __decorate([Component({\n  selector: 'ngx-timepicker-time-control',\n  template: \"<div class=\\\"ngx-timepicker-control\\\" [ngClass]=\\\"{'ngx-timepicker-control--active': isFocused}\\\">\\n    <!--suppress HtmlFormInputWithoutLabel -->\\n    <input class=\\\"ngx-timepicker-control__input\\\"\\n           maxlength=\\\"2\\\"\\n           [ngModel]=\\\"time | timeParser: timeUnit | timeLocalizer: timeUnit : true\\\"\\n           (ngModelChange)=\\\"onModelChange($event)\\\"\\n           [placeholder]=\\\"placeholder\\\"\\n           [disabled]=\\\"disabled\\\"\\n           (keydown)=\\\"onKeydown($event)\\\"\\n           (keypress)=\\\"changeTime($event)\\\"\\n           (focus)=\\\"onFocus()\\\"\\n           (blur)=\\\"onBlur()\\\">\\n    <div class=\\\"ngx-timepicker-control__arrows\\\">\\n            <span class=\\\"ngx-timepicker-control__arrow\\\" role=\\\"button\\\" (click)=\\\"increase()\\\">\\n                &#9650;\\n            </span>\\n        <span class=\\\"ngx-timepicker-control__arrow\\\" role=\\\"button\\\" (click)=\\\"decrease()\\\">\\n                &#9660;\\n            </span>\\n    </div>\\n</div>\\n\",\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [TimeParserPipe],\n  styles: [\".ngx-timepicker-control{position:relative;display:flex;width:60px;height:30px;padding:0 5px;box-sizing:border-box}.ngx-timepicker-control--active:after{content:'';position:absolute;bottom:-2px;left:0;width:100%;height:1px;background-color:#00bfff}.ngx-timepicker-control__input{width:100%;height:100%;padding:0 5px 0 0;border:0;font-size:1rem;color:inherit;outline:0;text-align:center}.ngx-timepicker-control__input:disabled{background-color:transparent}.ngx-timepicker-control__arrows{position:absolute;right:2px;top:0;display:flex;flex-direction:column}.ngx-timepicker-control__arrow{font-size:11px;color:rgba(0,0,0,.4);cursor:pointer;transition:color .2s;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-timepicker-control__arrow:hover{color:rgba(0,0,0,.9)}\"]\n})], NgxTimepickerTimeControlComponent);\n\nfunction concatTime(currentTime, nextTime) {\n  var isNumber = /\\d/.test(nextTime);\n\n  if (isNumber) {\n    var time = currentTime + nextTime;\n    return +time;\n  }\n}\n\nvar NgxTimepickerPeriodSelectorComponent = /*#__PURE__*/function () {\n  function NgxTimepickerPeriodSelectorComponent(locale) {\n    _classCallCheck(this, NgxTimepickerPeriodSelectorComponent);\n\n    this.locale = locale;\n    this.periodSelected = new EventEmitter();\n    this.period = TimePeriod;\n    this.meridiems = Info.meridiems({\n      locale: this.locale\n    });\n  }\n\n  _createClass(NgxTimepickerPeriodSelectorComponent, [{\n    key: \"open\",\n    value: function open() {\n      if (!this.disabled) {\n        this.isOpened = true;\n      }\n    }\n  }, {\n    key: \"select\",\n    value: function select(period) {\n      this.periodSelected.next(period);\n      this.isOpened = false;\n    }\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick() {\n      this.isOpened = false;\n    }\n  }, {\n    key: \"selectedPeriod\",\n    set: function set(period) {\n      if (period) {\n        var periods = [TimePeriod.AM, TimePeriod.PM];\n        this.localizedPeriod = this.meridiems[periods.indexOf(period)];\n      }\n    }\n  }]);\n\n  return NgxTimepickerPeriodSelectorComponent;\n}();\n\nNgxTimepickerPeriodSelectorComponent.ctorParameters = function () {\n  return [{\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [TIME_LOCALE]\n    }]\n  }];\n};\n\n__decorate([Input()], NgxTimepickerPeriodSelectorComponent.prototype, \"isOpened\", void 0);\n\n__decorate([Input()], NgxTimepickerPeriodSelectorComponent.prototype, \"disabled\", void 0);\n\n__decorate([Input()], NgxTimepickerPeriodSelectorComponent.prototype, \"selectedPeriod\", null);\n\n__decorate([Output()], NgxTimepickerPeriodSelectorComponent.prototype, \"periodSelected\", void 0);\n\nNgxTimepickerPeriodSelectorComponent = __decorate([Component({\n  selector: 'ngx-timepicker-period-selector',\n  template: \"<div class=\\\"period\\\">\\n    <div class=\\\"period-control\\\">\\n        <button class=\\\"period-control__button period__btn--default\\\"\\n                [ngClass]=\\\"{'period-control__button--disabled': disabled}\\\"\\n                type=\\\"button\\\"\\n                (click)=\\\"open()\\\">\\n            <span>{{localizedPeriod}}</span>\\n            <span class=\\\"period-control__arrow\\\">&#9660;</span>\\n        </button>\\n    </div>\\n    <ul class=\\\"period-selector\\\" @scaleInOut *ngIf=\\\"isOpened\\\" [timepickerAutofocus]=\\\"true\\\">\\n        <li>\\n            <button class=\\\"period-selector__button period__btn--default\\\"\\n                    type=\\\"button\\\"\\n                    (click)=\\\"select(period.AM)\\\"\\n                    [ngClass]=\\\"{'period-selector__button--active': localizedPeriod === meridiems[0]}\\\">{{meridiems[0]}}</button>\\n        </li>\\n        <li>\\n            <button class=\\\"period-selector__button period__btn--default\\\"\\n                    type=\\\"button\\\"\\n                    (click)=\\\"select(period.PM)\\\"\\n                    [ngClass]=\\\"{'period-selector__button--active': localizedPeriod === meridiems[1]}\\\">{{meridiems[1]}}</button>\\n        </li>\\n    </ul>\\n</div>\\n<div class=\\\"overlay\\\" (click)=\\\"backdropClick()\\\" *ngIf=\\\"isOpened\\\"></div>\\n\",\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [trigger('scaleInOut', [transition(':enter', [style({\n    transform: 'scale(0)',\n    opacity: 0\n  }), animate(200, style({\n    transform: 'scale(1)',\n    opacity: 1\n  }))]), transition(':leave', [animate(200, style({\n    transform: 'scale(0)',\n    opacity: 0\n  }))])])],\n  styles: [\".period{position:relative}.period__btn--default{padding:0;border:none;background-color:transparent;cursor:pointer;text-align:left;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;outline:0}.period-control{position:relative}.period-control__button{position:relative;width:60px;font-size:1rem;color:inherit;text-align:center}.period-control__button:not(.period-control__button--disabled):focus:after{content:'';position:absolute;bottom:-8px;left:0;width:100%;height:1px;background-color:#00bfff}.period-control__arrow{margin-left:10px;font-size:12px;color:rgba(0,0,0,.4)}.period-selector{position:absolute;top:calc(50% - 50px);right:calc(-50% + -50px);max-width:135px;width:150px;padding:6px 0;margin:0;list-style:none;background-color:#f5f5f5;box-shadow:0 1px 3px 0 rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 2px 1px -1px rgba(0,0,0,.12);z-index:201}.period-selector__button{width:100%;height:48px;padding:0 16px;line-height:48px}.period-selector__button--active{color:#00bfff}.period-selector__button:focus{background-color:#eee}.overlay{position:fixed;width:100%;height:100%;top:0;left:0;background-color:transparent;z-index:200}\"]\n}), __param(0, Inject(TIME_LOCALE))], NgxTimepickerPeriodSelectorComponent);\n\nvar TimeLocalizerPipe = /*#__PURE__*/function () {\n  function TimeLocalizerPipe(locale) {\n    _classCallCheck(this, TimeLocalizerPipe);\n\n    this.locale = locale;\n  }\n\n  _createClass(TimeLocalizerPipe, [{\n    key: \"transform\",\n    value: function transform(time, timeUnit) {\n      var isKeyboardEnabled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (time == null || time === '') {\n        return '';\n      }\n\n      switch (timeUnit) {\n        case TimeUnit.HOUR:\n          {\n            var format = time === 0 || isKeyboardEnabled ? 'HH' : 'H';\n            return this.formatTime('hour', time, format);\n          }\n\n        case TimeUnit.MINUTE:\n          return this.formatTime('minute', time, 'mm');\n\n        default:\n          throw new Error(\"There is no Time Unit with type \".concat(timeUnit));\n      }\n    }\n  }, {\n    key: \"formatTime\",\n    value: function formatTime(timeMeasure, time, format) {\n      try {\n        return DateTime.fromObject(_defineProperty({}, timeMeasure, +time)).setLocale(this.locale).toFormat(format);\n      } catch (_a) {\n        throw new Error(\"Cannot format provided time - \".concat(time, \" to locale - \").concat(this.locale));\n      }\n    }\n  }]);\n\n  return TimeLocalizerPipe;\n}();\n\nTimeLocalizerPipe.ctorParameters = function () {\n  return [{\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [TIME_LOCALE]\n    }]\n  }];\n};\n\nTimeLocalizerPipe = __decorate([Pipe({\n  name: 'timeLocalizer'\n}), __param(0, Inject(TIME_LOCALE))], TimeLocalizerPipe);\n\nvar ActiveHourPipe = /*#__PURE__*/function () {\n  function ActiveHourPipe() {\n    _classCallCheck(this, ActiveHourPipe);\n  }\n\n  _createClass(ActiveHourPipe, [{\n    key: \"transform\",\n    value: function transform(hour, currentHour, isClockFaceDisabled) {\n      if (hour == null || isClockFaceDisabled) {\n        return false;\n      }\n\n      return hour === currentHour;\n    }\n  }]);\n\n  return ActiveHourPipe;\n}();\n\nActiveHourPipe = __decorate([Pipe({\n  name: 'activeHour'\n})], ActiveHourPipe);\n\nvar ActiveMinutePipe = /*#__PURE__*/function () {\n  function ActiveMinutePipe() {\n    _classCallCheck(this, ActiveMinutePipe);\n  }\n\n  _createClass(ActiveMinutePipe, [{\n    key: \"transform\",\n    value: function transform(minute, currentMinute, gap, isClockFaceDisabled) {\n      if (minute == null || isClockFaceDisabled) {\n        return false;\n      }\n\n      var defaultGap = 5;\n      return currentMinute === minute && minute % (gap || defaultGap) === 0;\n    }\n  }]);\n\n  return ActiveMinutePipe;\n}();\n\nActiveMinutePipe = __decorate([Pipe({\n  name: 'activeMinute'\n})], ActiveMinutePipe);\n\nvar NgxMaterialTimepickerContentComponent = function NgxMaterialTimepickerContentComponent() {\n  _classCallCheck(this, NgxMaterialTimepickerContentComponent);\n};\n\n__decorate([Input()], NgxMaterialTimepickerContentComponent.prototype, \"appendToInput\", void 0);\n\n__decorate([Input()], NgxMaterialTimepickerContentComponent.prototype, \"inputElement\", void 0);\n\nNgxMaterialTimepickerContentComponent = __decorate([Component({\n  selector: 'ngx-material-timepicker-content',\n  template: \"<div [ngxAppendToInput]=\\\"inputElement\\\" *ngIf=\\\"appendToInput;else timepickerModal\\\">\\n    <!--suppress HtmlUnknownAttribute -->\\n    <ng-container *ngTemplateOutlet=\\\"timepickerOutlet\\\"></ng-container>\\n</div>\\n\\n<ng-template #timepickerModal>\\n    <!--suppress HtmlUnknownAttribute -->\\n    <ng-container *ngTemplateOutlet=\\\"timepickerOutlet\\\"></ng-container>\\n</ng-template>\\n\\n<ng-template #timepickerOutlet>\\n    <ng-content></ng-content>\\n</ng-template>\\n\"\n})], NgxMaterialTimepickerContentComponent);\n\nvar AppendToInputDirective = /*#__PURE__*/function () {\n  function AppendToInputDirective(elementRef, renderer) {\n    _classCallCheck(this, AppendToInputDirective);\n\n    this.renderer = renderer;\n    this.element = elementRef.nativeElement;\n  }\n\n  _createClass(AppendToInputDirective, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this._inputCords = this.inputCords;\n      this._direction = this.direction;\n      this.append();\n    }\n  }, {\n    key: \"changePosition\",\n    value: function changePosition() {\n      var _this$inputCords = this.inputCords,\n          bottom = _this$inputCords.bottom,\n          top = _this$inputCords.top;\n      var y = this.defineElementYByDirection(top, bottom);\n      this.setStyle('top', \"\".concat(y, \"px\"));\n    }\n  }, {\n    key: \"append\",\n    value: function append() {\n      var _this$_inputCords = this._inputCords,\n          left = _this$_inputCords.left,\n          bottom = _this$_inputCords.bottom,\n          top = _this$_inputCords.top;\n      var y = this.defineElementYByDirection(top, bottom);\n      this.setStyle('position', 'fixed');\n      this.setStyle('left', \"\".concat(left, \"px\"));\n      this.setStyle('top', \"\".concat(y, \"px\"));\n    }\n  }, {\n    key: \"setStyle\",\n    value: function setStyle(style, value) {\n      this.renderer.setStyle(this.element, style, value);\n    }\n  }, {\n    key: \"defineElementYByDirection\",\n    value: function defineElementYByDirection(inputTop, inputBottom) {\n      if (this._direction === 'top') {\n        return inputTop - this.element.offsetHeight;\n      } else if (this._direction === 'center') {\n        return inputTop - this.element.offsetHeight / 2;\n      }\n\n      return inputBottom;\n    }\n  }, {\n    key: \"inputCords\",\n    get: function get() {\n      return this.inputElement.getBoundingClientRect();\n    }\n  }, {\n    key: \"direction\",\n    get: function get() {\n      var height = this.element.offsetHeight;\n      var _this$_inputCords2 = this._inputCords,\n          bottom = _this$_inputCords2.bottom,\n          top = _this$_inputCords2.top;\n      var isElementFit = (window && window.innerHeight) - bottom < height;\n      var isTop = isElementFit && top > height;\n      var isCenter = isElementFit && top < height;\n\n      if (isTop) {\n        return 'top';\n      } else if (isCenter) {\n        return 'center';\n      }\n\n      return 'bottom';\n    }\n  }]);\n\n  return AppendToInputDirective;\n}();\n\nAppendToInputDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Renderer2\n  }];\n};\n\n__decorate([Input('ngxAppendToInput')], AppendToInputDirective.prototype, \"inputElement\", void 0);\n\n__decorate([HostListener('window:scroll')], AppendToInputDirective.prototype, \"changePosition\", null);\n\nAppendToInputDirective = __decorate([Directive({\n  selector: '[ngxAppendToInput]'\n})], AppendToInputDirective);\nvar NgxMaterialTimepickerModule_1;\n\nvar NgxMaterialTimepickerModule = NgxMaterialTimepickerModule_1 = /*#__PURE__*/function () {\n  function NgxMaterialTimepickerModule() {\n    _classCallCheck(this, NgxMaterialTimepickerModule);\n  }\n\n  _createClass(NgxMaterialTimepickerModule, null, [{\n    key: \"setLocale\",\n    value: function setLocale(locale) {\n      return {\n        ngModule: NgxMaterialTimepickerModule_1,\n        providers: [{\n          provide: TIME_LOCALE,\n          useValue: locale\n        }]\n      };\n    }\n  }]);\n\n  return NgxMaterialTimepickerModule;\n}();\n\nNgxMaterialTimepickerModule = NgxMaterialTimepickerModule_1 = __decorate([NgModule({\n  imports: [CommonModule, FormsModule],\n  exports: [NgxMaterialTimepickerComponent, NgxMaterialTimepickerToggleComponent, NgxTimepickerFieldComponent, TimepickerDirective, NgxMaterialTimepickerToggleIconDirective, NgxMaterialTimepickerThemeDirective, NgxMaterialTimepicker24HoursFaceComponent, NgxMaterialTimepicker12HoursFaceComponent, NgxMaterialTimepickerMinutesFaceComponent, NgxMaterialTimepickerFaceComponent, NgxMaterialTimepickerDialComponent, NgxMaterialTimepickerDialControlComponent],\n  declarations: [NgxMaterialTimepickerComponent, NgxMaterialTimepicker24HoursFaceComponent, NgxMaterialTimepicker12HoursFaceComponent, NgxMaterialTimepickerMinutesFaceComponent, NgxMaterialTimepickerFaceComponent, NgxMaterialTimepickerToggleComponent, NgxMaterialTimepickerButtonComponent, NgxMaterialTimepickerDialComponent, NgxMaterialTimepickerDialControlComponent, NgxMaterialTimepickerPeriodComponent, TimeFormatterPipe, TimepickerDirective, OverlayDirective, NgxMaterialTimepickerToggleIconDirective, AutofocusDirective, MinutesFormatterPipe, NgxMaterialTimepickerThemeDirective, NgxTimepickerFieldComponent, NgxTimepickerTimeControlComponent, NgxTimepickerPeriodSelectorComponent, TimeLocalizerPipe, TimeParserPipe, ActiveHourPipe, ActiveMinutePipe, NgxMaterialTimepickerContainerComponent, NgxMaterialTimepickerContentComponent, AppendToInputDirective],\n  entryComponents: [NgxMaterialTimepickerContainerComponent]\n})], NgxMaterialTimepickerModule);\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxMaterialTimepicker12HoursFaceComponent, NgxMaterialTimepicker24HoursFaceComponent, NgxMaterialTimepickerComponent, NgxMaterialTimepickerDialComponent, NgxMaterialTimepickerDialControlComponent, NgxMaterialTimepickerFaceComponent, NgxMaterialTimepickerMinutesFaceComponent, NgxMaterialTimepickerModule, NgxMaterialTimepickerThemeDirective, NgxMaterialTimepickerToggleIconDirective, NgxTimepickerFieldComponent, TimepickerDirective, NgxMaterialTimepickerEventService as ɵa, DomService as ɵb, NgxMaterialTimepickerToggleComponent as ɵc, NgxMaterialTimepickerService as ɵd, TIME_LOCALE as ɵe, NgxMaterialTimepickerHoursFace as ɵf, TimeParserPipe as ɵg, NgxMaterialTimepickerButtonComponent as ɵh, NgxMaterialTimepickerPeriodComponent as ɵi, TimeFormatterPipe as ɵj, OverlayDirective as ɵk, AutofocusDirective as ɵl, MinutesFormatterPipe as ɵm, NgxTimepickerTimeControlComponent as ɵn, NgxTimepickerPeriodSelectorComponent as ɵo, TimeLocalizerPipe as ɵp, ActiveHourPipe as ɵq, ActiveMinutePipe as ɵr, AnimationState as ɵs, NgxMaterialTimepickerContainerComponent as ɵt, NgxMaterialTimepickerContentComponent as ɵu, AppendToInputDirective as ɵv };","map":{"version":3,"sources":["ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/dom.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-unit.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-period.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-format.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/time-adapter.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/tokens/time-locale.token.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/ngx-material-timepicker-container/ngx-material-timepicker-container.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-timepicker.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-theme.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker-time.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-parser.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/overlay.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/minutes-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/autofocus.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/ngx-timepicker-field.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-localizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/active-hour.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/active-minute.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/ngx-material-timepicker-content/ngx-material-timepicker-content.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/append-to-input.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.module.ts","ng://ngx-material-timepicker/ngx-material-timepicker.ts"],"names":["tslib_1.__param","tslib_1.__decorate"],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxMaterialTimepickerEventService {\n\n    private backdropClickSubject: Subject<MouseEvent> = new Subject();\n    private keydownEventSubject: Subject<KeyboardEvent> = new Subject();\n\n    get backdropClick(): Observable<MouseEvent> {\n        return this.backdropClickSubject.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n\n    get keydownEvent(): Observable<KeyboardEvent> {\n        return this.keydownEventSubject.asObservable().pipe(shareReplay({bufferSize: 1, refCount: true}));\n    }\n\n    dispatchEvent(event: KeyboardEvent | MouseEvent): void {\n        switch (event.type) {\n            case 'click':\n                this.backdropClickSubject.next(<MouseEvent>event);\n                break;\n            case 'keydown':\n                this.keydownEventSubject.next(<KeyboardEvent>event);\n                break;\n            default:\n                throw new Error('no such event type');\n        }\n    }\n\n}\n","import {\n    ApplicationRef,\n    ComponentFactoryResolver,\n    ComponentRef,\n    EmbeddedViewRef,\n    Inject,\n    Injectable,\n    Injector,\n    Optional,\n    Type\n} from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    NgxMaterialTimepickerContainerComponent\n} from '../components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport { TimepickerConfig } from '../models/timepicker-config.interface';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DomService {\n\n    private componentRef: ComponentRef<NgxMaterialTimepickerContainerComponent>;\n\n    constructor(private cfr: ComponentFactoryResolver,\n                private appRef: ApplicationRef,\n                private injector: Injector,\n                @Optional() @Inject(DOCUMENT) private document: any) {\n    }\n\n    appendTimepickerToBody(timepicker: Type<NgxMaterialTimepickerContainerComponent>, config: TimepickerConfig): void {\n        this.componentRef = this.cfr.resolveComponentFactory(timepicker).create(this.injector);\n\n        Object.keys(config).forEach(key => this.componentRef.instance[key] = config[key]);\n\n        this.appRef.attachView(this.componentRef.hostView);\n\n        const domElement: HTMLElement = (this.componentRef.hostView as EmbeddedViewRef<NgxMaterialTimepickerContainerComponent>)\n            .rootNodes[0];\n\n        this.document.body.appendChild(domElement);\n    }\n\n    destroyTimepicker(): void {\n        this.componentRef.destroy();\n        this.appRef.detachView(this.componentRef.hostView);\n    }\n}\n","export enum TimeUnit {\n    HOUR,\n    MINUTE\n}\n","export enum TimePeriod {\n    AM = 'AM',\n    PM = 'PM'\n}\n","export enum TimeFormat {\n    TWELVE = 'hh:mm a',\n    TWELVE_SHORT = 'h:m a',\n    TWENTY_FOUR = 'HH:mm',\n    TWENTY_FOUR_SHORT = 'H:m'\n}\n","/* tslint:disable */\nimport { DateTime } from 'luxon';\n\n\nexport function isSameOrAfter(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return time.hour >= compareWith.hour;\n    }\n    if (unit === 'minutes') {\n        return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\n    }\n}\n\nexport function isSameOrBefore(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return time.hour <= compareWith.hour;\n    }\n    if (unit === 'minutes') {\n        return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\n    }\n}\n\nexport function isBetween(time: DateTime, before: DateTime, after: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\n    if (unit === 'hours') {\n        return isSameOrBefore(time, after, unit) && isSameOrAfter(time, before, unit);\n    }\n    if (unit === 'minutes') {\n        return isSameOrBefore(time, after) && isSameOrAfter(time, before);\n    }\n}\n\nexport function isDigit(e: KeyboardEvent) {\n    // Allow: backspace, delete, tab, escape, enter\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\n        // Allow: Ctrl/cmd+A\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+C\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: Ctrl/cmd+X\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\n        // Allow: home, end, left, right, up, down\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\n\n        return true;\n    }\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\n}\n","import { DateTime, LocaleOptions } from 'luxon';\n\nimport { TimeFormat } from '../models/time-format.enum';\nimport { TimePeriod } from '../models/time-period.enum';\nimport { isBetween, isSameOrAfter, isSameOrBefore } from '../utils/timepicker.utils';\nimport { TimeOptions } from '../models/time-options.interface';\n\n// @dynamic\nexport class TimeAdapter {\n    static DEFAULT_FORMAT = 12;\n    static DEFAULT_LOCALE = 'en-US';\n    static DEFAULT_NUMBERING_SYSTEM = 'latn';\n\n    static parseTime(time: string, opts: TimeOptions): DateTime {\n        const {numberingSystem, locale} = TimeAdapter.getLocaleOptionsByTime(time, opts);\n        const isPeriodExist = time.split(' ').length === 2;\n        const timeMask = isPeriodExist ? TimeFormat.TWELVE_SHORT : TimeFormat.TWENTY_FOUR_SHORT;\n\n        return DateTime.fromFormat(time, timeMask, {numberingSystem, locale});\n    }\n\n    static formatTime(time: string, opts: TimeOptions): string {\n        if (!time) {\n            return 'Invalid Time';\n        }\n        const {format} = opts;\n        const parsedTime = TimeAdapter.parseTime(time, opts).setLocale(TimeAdapter.DEFAULT_LOCALE);\n\n        if (format !== 24) {\n            return parsedTime.toLocaleString({\n                ...DateTime.TIME_SIMPLE,\n                hour12: format !== 24,\n                numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM\n            }).replace(/\\u200E/g, '');\n        }\n        return parsedTime.toISOTime({\n            includeOffset: false,\n            suppressMilliseconds: true,\n            suppressSeconds: true\n        }).replace(/\\u200E/g, '');\n    }\n\n    static toLocaleTimeString(time: string, opts: TimeOptions = {}): string {\n        const {format = TimeAdapter.DEFAULT_FORMAT, locale = TimeAdapter.DEFAULT_LOCALE} = opts;\n        const hourCycle = format === 24 ? 'h23' : 'h12';\n        const timeFormat = {...DateTime.TIME_SIMPLE, hourCycle};\n        const timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\n\n        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);\n    }\n\n    static isTimeAvailable(\n        time: string,\n        min?: DateTime,\n        max?: DateTime,\n        granularity?: 'hours' | 'minutes',\n        minutesGap?: number | null,\n        format?: number\n    ): boolean {\n        if (!time) {\n            return;\n        }\n\n        const convertedTime = this.parseTime(time, {format});\n        const minutes = convertedTime.minute;\n\n        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\n        }\n        const isAfter = (min && !max)\n            && isSameOrAfter(convertedTime, min, granularity);\n        const isBefore = (max && !min)\n            && isSameOrBefore(convertedTime, max, granularity);\n        const between = (min && max)\n            && isBetween(convertedTime, min, max, granularity);\n        const isAvailable = !min && !max;\n\n        return isAfter || isBefore || between || isAvailable;\n    }\n\n    /***\n     *  Format hour according to time format (12 or 24)\n     */\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\n        if (format === 24) {\n            return currentHour;\n        }\n        const hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\n\n        if (period === TimePeriod.AM && hour === 12) {\n            return 0;\n        } else if (period === TimePeriod.PM && hour === 24) {\n            return 12;\n        }\n        return hour;\n    }\n\n    static fromDateTimeToString(time: DateTime, format: number): string {\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\n\n        return time.reconfigure({\n            numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,\n            locale: TimeAdapter.DEFAULT_LOCALE\n        }).toFormat(timeFormat);\n    }\n\n    private static getLocaleOptionsByTime(time: string, opts: TimeOptions): LocaleOptions {\n        const {numberingSystem, locale} = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts();\n        const localeConfig: LocaleOptions = {numberingSystem: numberingSystem, locale};\n        const defaultConfig: LocaleOptions = {numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM, locale: TimeAdapter.DEFAULT_LOCALE};\n\n        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { ClockFaceTime } from '../models/clock-face-time.interface';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { TimePeriod } from '../models/time-period.enum';\nimport { TimeAdapter } from './time-adapter';\nimport { DateTime } from 'luxon';\n\n\nconst DEFAULT_HOUR: ClockFaceTime = {\n    time: 12,\n    angle: 360\n};\nconst DEFAULT_MINUTE: ClockFaceTime = {\n    time: 0,\n    angle: 360\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxMaterialTimepickerService {\n\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\n\n\n    set hour(hour: ClockFaceTime) {\n        this.hourSubject.next(hour);\n    }\n\n    get selectedHour(): Observable<ClockFaceTime> {\n        return this.hourSubject.asObservable();\n    }\n\n    set minute(minute: ClockFaceTime) {\n        this.minuteSubject.next(minute);\n    }\n\n    get selectedMinute(): Observable<ClockFaceTime> {\n        return this.minuteSubject.asObservable();\n    }\n\n    set period(period: TimePeriod) {\n        const isPeriodValid = (period === TimePeriod.AM) || (period === TimePeriod.PM);\n\n        if (isPeriodValid) {\n            this.periodSubject.next(period);\n        }\n    }\n\n    get selectedPeriod(): Observable<TimePeriod> {\n        return this.periodSubject.asObservable();\n    }\n\n\n    setDefaultTimeIfAvailable(time: string, min: DateTime, max: DateTime, format: number, minutesGap?: number) {\n        /* Workaround to double error message*/\n        try {\n            if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes', minutesGap)) {\n                this.setDefaultTime(time, format);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    getFullTime(format: number): string {\n        const selectedHour = this.hourSubject.getValue().time;\n        const selectedMinute = this.minuteSubject.getValue().time;\n        const hour = selectedHour != null ? selectedHour : DEFAULT_HOUR.time;\n        const minute = selectedMinute != null ? selectedMinute : DEFAULT_MINUTE.time;\n        const period = format === 12 ? this.periodSubject.getValue() : '';\n        const time = `${hour}:${minute} ${period}`.trim();\n\n        return TimeAdapter.formatTime(time, {format});\n    }\n\n    private setDefaultTime(time: string, format: number) {\n        const defaultTime = TimeAdapter.parseTime(time, {format}).toJSDate();\n\n        if (DateTime.fromJSDate(defaultTime).isValid) {\n            const period = time.substr(time.length - 2).toUpperCase();\n            const hour = defaultTime.getHours();\n\n            this.hour = {...DEFAULT_HOUR, time: formatHourByPeriod(hour, period as TimePeriod)};\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\n            this.period = period as TimePeriod;\n\n        } else {\n            this.resetTime();\n        }\n    }\n\n    private resetTime(): void {\n        this.hour = {...DEFAULT_HOUR};\n        this.minute = {...DEFAULT_MINUTE};\n        this.period = TimePeriod.AM;\n    }\n}\n\n/***\n *  Format hour in 24hours format to meridian (AM or PM) format\n */\nfunction formatHourByPeriod(hour: number, period: TimePeriod): number {\n    switch (period) {\n        case TimePeriod.AM:\n            return hour === 0 ? 12 : hour;\n        case TimePeriod.PM:\n            return hour === 12 ? 12 : hour - 12;\n        default:\n            return hour;\n    }\n}\n","import { InjectionToken } from '@angular/core';\nimport { TimeAdapter } from '../services/time-adapter';\n\nexport const TIME_LOCALE = new InjectionToken<string>('TimeLocale', {\n    providedIn: 'root',\n    factory: () => TimeAdapter.DEFAULT_LOCALE\n});\n","import { Component, HostListener, Inject, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { DateTime } from 'luxon';\nimport { animate, AnimationEvent, style, transition, trigger } from '@angular/animations';\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\nimport { Observable, Subject } from 'rxjs';\nimport { shareReplay, takeUntil } from 'rxjs/operators';\nimport { TimeAdapter } from '../../services/time-adapter';\nimport { TimepickerRef } from '../../models/timepicker-ref.interface';\nimport { TimepickerConfig } from '../../models/timepicker-config.interface';\nimport { NgxMaterialTimepickerEventService } from '../../services/ngx-material-timepicker-event.service';\nimport { NgxMaterialTimepickerTheme } from '../../models/ngx-material-timepicker-theme.interface';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\n\nexport enum AnimationState {\n    ENTER = 'enter',\n    LEAVE = 'leave'\n}\n\n@Component({\n    selector: 'ngx-material-timepicker-container',\n    templateUrl: './ngx-material-timepicker-container.component.html',\n    styleUrls: ['./ngx-material-timepicker-container.component.scss'],\n    animations: [\n        trigger('timepicker', [\n            transition(`* => ${AnimationState.ENTER}`, [\n                style({transform: 'translateY(-30%)'}),\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\n            ]),\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\n                style({transform: 'translateY(0)', opacity: 1}),\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\n            ])\n        ])\n    ],\n    providers: [NgxMaterialTimepickerService]\n})\nexport class NgxMaterialTimepickerContainerComponent implements OnInit, OnDestroy, TimepickerConfig {\n\n    selectedHour: Observable<ClockFaceTime>;\n    selectedMinute: Observable<ClockFaceTime>;\n    selectedPeriod: Observable<TimePeriod>;\n\n    timeUnit = TimeUnit;\n    activeTimeUnit = TimeUnit.HOUR;\n\n    animationState: AnimationState;\n\n    cancelBtnTmpl: TemplateRef<Node>;\n    editableHintTmpl: TemplateRef<Node>;\n    confirmBtnTmpl: TemplateRef<Node>;\n    inputElement: any;\n\n    enableKeyboardInput: boolean;\n    preventOverlayClick: boolean;\n    disableAnimation: boolean;\n    disabled: boolean;\n    appendToInput: boolean;\n    hoursOnly: boolean;\n\n    format: number;\n    minutesGap: number;\n\n    minTime: DateTime;\n    maxTime: DateTime;\n    time: string;\n\n    timepickerClass: string;\n    theme: NgxMaterialTimepickerTheme;\n    timepickerBaseRef: TimepickerRef;\n\n    @Input()\n    set defaultTime(time: string) {\n        this._defaultTime = time;\n        this.setDefaultTime(time);\n    }\n\n    get defaultTime(): string {\n        return this._defaultTime;\n    }\n\n    private _defaultTime: string;\n\n    private unsubscribe = new Subject();\n\n    constructor(private timepickerService: NgxMaterialTimepickerService,\n                private eventService: NgxMaterialTimepickerEventService,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(e: any): void {\n        this.eventService.dispatchEvent(e);\n        e.stopPropagation();\n    }\n\n    ngOnInit(): void {\n\n        this.animationState = !this.disableAnimation && AnimationState.ENTER;\n\n        this.defineTime();\n\n        this.selectedHour = this.timepickerService.selectedHour\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.selectedMinute = this.timepickerService.selectedMinute\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.selectedPeriod = this.timepickerService.selectedPeriod\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\n\n        this.timepickerBaseRef.timeUpdated.pipe(takeUntil(this.unsubscribe))\n            .subscribe(this.setDefaultTime.bind(this));\n    }\n\n    onHourChange(hour: ClockFaceTime): void {\n        this.timepickerService.hour = hour;\n        this.onTimeChange();\n    }\n\n    onHourSelected(hour: number): void {\n        if (!this.hoursOnly) {\n            this.changeTimeUnit(TimeUnit.MINUTE);\n        }\n        this.timepickerBaseRef.hourSelected.next(hour);\n    }\n\n    onMinuteChange(minute: ClockFaceTime): void {\n        this.timepickerService.minute = minute;\n        this.onTimeChange();\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n        this.onTimeChange();\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.activeTimeUnit = unit;\n    }\n\n    setTime(): void {\n        this.timepickerBaseRef.timeSet.next(this.timepickerService.getFullTime(this.format));\n        this.close();\n    }\n\n    close(): void {\n        if (this.disableAnimation) {\n            this.timepickerBaseRef.close();\n            return;\n        }\n\n        this.animationState = AnimationState.LEAVE;\n    }\n\n    animationDone(event: AnimationEvent): void {\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\n            this.timepickerBaseRef.close();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribe.next();\n        this.unsubscribe.complete();\n    }\n\n    private setDefaultTime(time: string): void {\n        this.timepickerService.setDefaultTimeIfAvailable(\n            time, this.minTime, this.maxTime, this.format, this.minutesGap);\n    }\n\n    private defineTime(): void {\n        const minTime = this.minTime;\n\n        if (minTime && (!this.time && !this.defaultTime)) {\n            const time = TimeAdapter.fromDateTimeToString(minTime, this.format);\n\n            this.setDefaultTime(time);\n        }\n    }\n\n    private onTimeChange(): void {\n        const time = TimeAdapter.toLocaleTimeString(this.timepickerService.getFullTime(this.format), {\n            locale: this.locale,\n            format: this.format\n        });\n\n        this.timepickerBaseRef.timeChanged.emit(time);\n    }\n\n}\n","import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\nimport { merge, Subject } from 'rxjs';\nimport { NgxMaterialTimepickerEventService } from './services/ngx-material-timepicker-event.service';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { DateTime } from 'luxon';\nimport { DomService } from './services/dom.service';\nimport {\n    NgxMaterialTimepickerContainerComponent\n} from './components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport { TimepickerRef } from './models/timepicker-ref.interface';\nimport { NgxMaterialTimepickerTheme } from './models/ngx-material-timepicker-theme.interface';\n\nconst ESCAPE = 27;\n\n@Component({\n    selector: 'ngx-material-timepicker',\n    template: '',\n})\nexport class NgxMaterialTimepickerComponent implements TimepickerRef {\n\n    timeUpdated = new Subject<string>();\n\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n    @Input('ESC') isEsc = true;\n    @Input() enableKeyboardInput: boolean;\n    @Input() preventOverlayClick: boolean;\n    @Input() disableAnimation: boolean;\n    @Input() appendToInput: boolean;\n    @Input() hoursOnly = false;\n    @Input() defaultTime: string;\n    @Input() timepickerClass: string;\n    @Input() theme: NgxMaterialTimepickerTheme;\n    @Input() min: DateTime;\n    @Input() max: DateTime;\n    /**\n     * @deprecated Since version 5.1.1. Will be deleted on version 6.0.0. Use @Input() theme instead\n     */\n    @Input()\n    set ngxMaterialTimepickerTheme(theme: NgxMaterialTimepickerTheme) {\n        console.warn(`'ngxMaterialTimepickerTheme' is deprecated. Use 'theme' instead`);\n        this._ngxMaterialTimepickerTheme = theme;\n    }\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n    }\n\n    get format(): number {\n        return this.timepickerInput ? this.timepickerInput.format : this._format;\n    }\n\n    @Input()\n    set minutesGap(gap: number) {\n        if (gap == null) {\n            return;\n        }\n        gap = Math.floor(gap);\n        this._minutesGap = gap <= 59 ? gap : 1;\n    }\n\n    get minutesGap(): number {\n        return this._minutesGap;\n    }\n\n    @Output() timeSet = new EventEmitter<string>();\n    @Output() opened = new EventEmitter<null>();\n    @Output() closed = new EventEmitter<null>();\n    @Output() hourSelected = new EventEmitter<number>();\n    @Output() timeChanged = new EventEmitter<string>();\n\n    private _minutesGap: number;\n    private _format: number;\n    private _ngxMaterialTimepickerTheme: NgxMaterialTimepickerTheme;\n    private timepickerInput: TimepickerDirective;\n    private unsubscribe = new Subject();\n\n    constructor(private eventService: NgxMaterialTimepickerEventService,\n                private domService: DomService) {\n    }\n\n    get minTime(): DateTime {\n        return this.timepickerInput ? (this.timepickerInput.min as DateTime) : this.min;\n    }\n\n    get maxTime(): DateTime {\n        return this.timepickerInput ? (this.timepickerInput.max as DateTime) : this.max;\n    }\n\n    get disabled(): boolean {\n        return this.timepickerInput && this.timepickerInput.disabled;\n    }\n\n    get time(): string {\n        return this.timepickerInput && this.timepickerInput.value;\n    }\n\n    get inputElement(): any {\n        return this.timepickerInput && this.timepickerInput.element;\n    }\n\n    /***\n     * Register an input with this timepicker.\n     * input - The timepicker input to register with this timepicker\n     */\n    registerInput(input: TimepickerDirective): void {\n        if (this.timepickerInput) {\n            throw Error('A Timepicker can only be associated with a single input.');\n        }\n        this.timepickerInput = input;\n    }\n\n    open(): void {\n        this.domService.appendTimepickerToBody(NgxMaterialTimepickerContainerComponent, {\n            timepickerBaseRef: this,\n            time: this.time,\n            defaultTime: this.defaultTime,\n            maxTime: this.maxTime,\n            minTime: this.minTime,\n            format: this.format,\n            minutesGap: this.minutesGap,\n            disableAnimation: this.disableAnimation,\n            cancelBtnTmpl: this.cancelBtnTmpl,\n            confirmBtnTmpl: this.confirmBtnTmpl,\n            editableHintTmpl: this.editableHintTmpl,\n            disabled: this.disabled,\n            enableKeyboardInput: this.enableKeyboardInput,\n            preventOverlayClick: this.preventOverlayClick,\n            appendToInput: this.appendToInput,\n            hoursOnly: this.hoursOnly,\n            theme: this.theme || this._ngxMaterialTimepickerTheme,\n            timepickerClass: this.timepickerClass,\n            inputElement: this.inputElement\n        });\n        this.opened.next();\n        this.subscribeToEvents();\n    }\n\n    close(): void {\n        this.domService.destroyTimepicker();\n        this.closed.next();\n        this.unsubscribeFromEvents();\n    }\n\n    updateTime(time: string): void {\n        this.timeUpdated.next(time);\n    }\n\n    private subscribeToEvents(): void {\n        merge(this.eventService.backdropClick,\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\n            .pipe(takeUntil(this.unsubscribe))\n            .subscribe(() => this.close());\n    }\n\n    private unsubscribeFromEvents(): void {\n        this.unsubscribe.next();\n        this.unsubscribe.complete();\n    }\n}\n","import {Directive} from '@angular/core';\n\n/* To override a default toggle icon */\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\n\nexport class NgxMaterialTimepickerToggleIconDirective {\n}\n","import {Component, ContentChild, Input} from '@angular/core';\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\n\n@Component({\n    selector: 'ngx-material-timepicker-toggle',\n    templateUrl: 'ngx-material-timepicker-toggle.component.html',\n    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\n})\n\nexport class NgxMaterialTimepickerToggleComponent {\n\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    private _disabled: boolean;\n\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective, {static: true}) customIcon: NgxMaterialTimepickerToggleIconDirective;\n\n    open(event): void {\n        if (this.timepicker) {\n            this.timepicker.open();\n            event.stopPropagation();\n        }\n    }\n}\n","import { Directive, ElementRef, HostListener, Inject, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { NgxMaterialTimepickerComponent } from '../ngx-material-timepicker.component';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { DateTime } from 'luxon';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\n\n@Directive({\n    selector: '[ngxTimepicker]',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: TimepickerDirective,\n            multi: true\n        }\n    ],\n    host: {\n        '[disabled]': 'disabled',\n        '(change)': 'updateValue($event.target.value)',\n        '(blur)': 'onTouched()',\n    },\n})\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this.value = this._value;\n            this._timepicker.updateTime(this._value);\n        }\n        this.previousFormat = this._format;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    private _format = 12;\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._min = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._min = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    private _min: string | DateTime;\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._max = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._max = value;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    private _max: string | DateTime;\n\n    @Input('ngxTimepicker')\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\n        this.registerTimepicker(picker);\n    }\n\n    private _timepicker: NgxMaterialTimepickerComponent;\n\n    @Input()\n    set value(value: string) {\n        if (!value) {\n            this._value = '';\n            this.updateInputValue();\n            return;\n        }\n        const time = TimeAdapter.formatTime(value, {locale: this.locale, format: this.format});\n        const isAvailable = TimeAdapter.isTimeAvailable(\n            time,\n            <DateTime>this._min,\n            <DateTime>this._max,\n            'minutes',\n            this._timepicker.minutesGap,\n            this._format\n        );\n\n        if (isAvailable) {\n            this._value = time;\n            this.updateInputValue();\n            return;\n        }\n        console.warn('Selected time doesn\\'t match min or max value');\n    }\n\n    get value(): string {\n        if (!this._value) {\n            return '';\n        }\n        return TimeAdapter.toLocaleTimeString(this._value, {format: this.format, locale: this.locale});\n    }\n\n    private _value = '';\n\n    @Input() disabled: boolean;\n    @Input() disableClick: boolean;\n\n    private timepickerSubscriptions: Subscription[] = [];\n    private previousFormat: number;\n\n    onTouched = () => {\n    }\n\n    private onChange: (value: any) => void = () => {\n    }\n\n    constructor(private elementRef: ElementRef,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    get element(): any {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    private set defaultTime(time: string) {\n        this._timepicker.defaultTime = TimeAdapter.formatTime(time, {locale: this.locale, format: this.format});\n    }\n\n    updateValue(value: string) {\n        this.value = value;\n        this.onChange(value);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['value'] && changes['value'].currentValue) {\n            this.defaultTime = changes['value'].currentValue;\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event) {\n        if (!this.disableClick) {\n            this._timepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    writeValue(value: string): void {\n        this.value = value;\n        if (value) {\n            this.defaultTime = value;\n        }\n    }\n\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    ngOnDestroy() {\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\n    }\n\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\n        if (picker) {\n            this._timepicker = picker;\n            this._timepicker.registerInput(this);\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\n                this.value = time;\n                this.onChange(this.value);\n                this.onTouched();\n                this.defaultTime = this._value;\n            }));\n        } else {\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\n        }\n    }\n\n    private updateInputValue(): void {\n        this.elementRef.nativeElement.value = this.value;\n    }\n\n}\n\n","import {AfterViewInit, Directive, ElementRef, Input} from '@angular/core';\nimport {NgxMaterialTimepickerTheme} from '../models/ngx-material-timepicker-theme.interface';\n\n@Directive({selector: '[ngxMaterialTimepickerTheme]'})\nexport class NgxMaterialTimepickerThemeDirective implements AfterViewInit {\n\n    @Input('ngxMaterialTimepickerTheme') theme: NgxMaterialTimepickerTheme;\n\n    private element: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        this.element = elementRef.nativeElement;\n    }\n\n    ngAfterViewInit() {\n        if (this.theme) {\n            this.setTheme(this.theme);\n        }\n    }\n\n    private setTheme(theme): void {\n        for (const val in theme) {\n            if (theme.hasOwnProperty(val)) {\n                if (typeof theme[val] === 'string') {\n                    for (const prop in theme) {\n                        if (theme.hasOwnProperty(prop)) {\n                            this.element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\n                        }\n                    }\n                    return;\n                }\n                this.setTheme(theme[val]);\n            }\n\n        }\n    }\n}\n\nfunction camelCaseToDash(myStr) {\n    return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n","import { ClockFaceTime } from '../models/clock-face-time.interface';\nimport { TimeAdapter } from '../services/time-adapter';\nimport { TimeFormat } from '../models/time-format.enum';\nimport { DisabledTimeConfig } from '../models/disabled-time-config.interface';\nimport { DateTime } from 'luxon';\n\n// @dynamic\nexport class TimepickerTimeUtils {\n\n  static  getHours(format: number): ClockFaceTime[] {\n        return Array(format).fill(1).map((v, i) => {\n            const angleStep = 30;\n            const time = v + i;\n            const angle = angleStep * time;\n            return {time: time === 24 ? 0 : time, angle};\n        });\n    }\n\n  static  disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\n        if (config.min || config.max) {\n\n            return hours.map(value => {\n                const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(value.time, config.format, config.period);\n                const currentTime = DateTime.fromObject({hour}).toFormat(TimeFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\n                };\n            });\n        }\n        return hours;\n    }\n\n   static getMinutes(gap = 1): ClockFaceTime[] {\n        const minutesCount = 60;\n        const angleStep = 360 / minutesCount;\n        const minutes = [];\n\n        for (let i = 0; i < minutesCount; i++) {\n            const angle = angleStep * i;\n            if (i % gap === 0) {\n                minutes.push({time: i, angle: angle !== 0 ? angle : 360});\n            }\n        }\n        return minutes;\n    }\n\n    static disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\n        if (config.min || config.max) {\n\n            const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\n\n            return minutes.map(value => {\n                const currentTime = DateTime.fromObject({hour, minute: value.time}).toFormat(TimeFormat.TWELVE);\n\n                return {\n                    ...value,\n                    disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\n                };\n            });\n        }\n        return minutes;\n    }\n\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\nimport { DateTime } from 'luxon';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n\nexport class NgxMaterialTimepickerHoursFace {\n\n    @Input() selectedHour: ClockFaceTime;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() format: number;\n\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\n    @Output() hourSelected = new EventEmitter<number>();\n\n    hoursList: ClockFaceTime[] = [];\n\n    protected constructor(format: number) {\n        this.hoursList = TimepickerTimeUtils.getHours(format);\n    }\n\n    onTimeSelected(time: number): void {\n        this.hourSelected.next(time);\n    }\n}\n","import { AfterContentInit, ChangeDetectionStrategy, Component } from '@angular/core';\nimport { NgxMaterialTimepickerHoursFace } from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-24-hours-face',\n    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\n\n    constructor() {\n        super(24);\n    }\n\n    ngAfterContentInit() {\n        this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n            min: this.minTime,\n            max: this.maxTime,\n            format: this.format\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { NgxMaterialTimepickerHoursFace } from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-12-hours-face',\n    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\n\n    @Input() period: TimePeriod;\n\n    constructor() {\n        super(12);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { DateTime } from 'luxon';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n\n@Component({\n    selector: 'ngx-material-timepicker-minutes-face',\n    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\n})\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\n\n    minutesList: ClockFaceTime[] = [];\n    timeUnit = TimeUnit;\n\n    @Input() selectedMinute: ClockFaceTime;\n    @Input() selectedHour: number;\n    @Input() period: TimePeriod;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue) {\n            const minutes = TimepickerTimeUtils.getMinutes(this.minutesGap);\n            this.minutesList = TimepickerTimeUtils.disableMinutes(minutes, this.selectedHour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n}\n\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimeUnit } from '../../models/time-unit.enum';\n\nconst CLOCK_HAND_STYLES = {\n    small: {\n        height: '75px',\n        top: 'calc(50% - 75px)'\n    },\n    large: {\n        height: '103px',\n        top: 'calc(50% - 103px)'\n    }\n};\n\n@Component({\n    selector: 'ngx-material-timepicker-face',\n    templateUrl: './ngx-material-timepicker-face.component.html',\n    styleUrls: ['./ngx-material-timepicker-face.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\n\n    timeUnit = TimeUnit;\n\n    isClockFaceDisabled: boolean;\n    innerClockFaceSize = 85;\n\n    @Input() faceTime: ClockFaceTime[];\n    @Input() selectedTime: ClockFaceTime;\n    @Input() unit: TimeUnit;\n    @Input() format: number;\n    @Input() minutesGap: number;\n\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\n    @Output() timeSelected = new EventEmitter<number>();\n\n    @ViewChild('clockFace', {static: true}) clockFace: ElementRef;\n    @ViewChild('clockHand', {static: true}) clockHand: ElementRef;\n\n    private isStarted: boolean;\n    private touchStartHandler: () => any;\n    private touchEndHandler: () => any;\n\n    ngAfterViewInit() {\n        this.setClockHandPosition();\n        this.addTouchEvents();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const faceTimeChanges = changes['faceTime'];\n        const selectedTimeChanges = changes['selectedTime'];\n\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\n            /* Set time according to passed an input value */\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\n        }\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\n            this.setClockHandPosition();\n        }\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\n            setTimeout(() => this.selectAvailableTime());\n        }\n    }\n\n\n    trackByTime(_, time: ClockFaceTime): string | number {\n        return time.time;\n    }\n\n    @HostListener('mousedown', ['$event'])\n    onMousedown(e: any) {\n        e.preventDefault();\n        this.isStarted = true;\n    }\n\n    @HostListener('click', ['$event'])\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\n    @HostListener('touchend', ['$event.changedTouches[0]'])\n    @HostListener('mousemove', ['$event'])\n    selectTime(e: any): void {\n\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\n            return;\n        }\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\n\n        /* Get x0 and y0 of the circle */\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\n        /* Counting the arctangent and convert it to from radian to deg */\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\n        /* Get angle according to quadrant */\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\n        /* Check if selected time from the inner clock face (24 hours format only) */\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\n        /* Round angle according to angle step */\n        const angleStep = this.unit === TimeUnit.MINUTE ? (6 * (this.minutesGap || 1)) : 30;\n        const roundedAngle = roundAngle(circleAngle, angleStep);\n        const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);\n\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\n\n        if (selectedTime && !selectedTime.disabled) {\n            this.timeChange.next(selectedTime);\n\n            /* To let know whether user ended interaction with clock face */\n            if (!this.isStarted) {\n                this.timeSelected.next(selectedTime.time);\n            }\n        }\n\n    }\n\n    @HostListener('mouseup', ['$event'])\n    onMouseup(e: any) {\n        e.preventDefault();\n        this.isStarted = false;\n    }\n\n    ngOnDestroy() {\n        this.removeTouchEvents();\n    }\n\n    private addTouchEvents(): void {\n        this.touchStartHandler = this.onMousedown.bind(this);\n        this.touchEndHandler = this.onMouseup.bind(this);\n\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\n    }\n\n    private removeTouchEvents(): void {\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\n    }\n\n    private setClockHandPosition(): void {\n        if (this.format === 24) {\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\n                this.decreaseClockHand();\n            } else {\n                this.increaseClockHand();\n            }\n        }\n\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\n    }\n\n    private selectAvailableTime(): void {\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\n\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\n            const availableTime = this.faceTime.find(time => !time.disabled);\n\n            this.timeChange.next(availableTime);\n        }\n    }\n\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\n        /* Detect whether time from the inner clock face or not (24 format only) */\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\n    }\n\n    private decreaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\n    }\n\n    private increaseClockHand(): void {\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\n    }\n}\n\nfunction roundAngle(angle: number, step: number): number {\n    return Math.round(angle / step) * step;\n}\n\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\n    if (y > y0 && x >= x0) {// II quarter\n        return 180 - currentAngle;\n    } else if (y > y0 && x < x0) {// III quarter\n        return 180 + currentAngle;\n    } else if (y < y0 && x < x0) {// IV quarter\n        return 360 - currentAngle;\n    } else {// I quarter\n        return currentAngle;\n    }\n}\n","import {Component} from '@angular/core';\n\n@Component({\n    selector: 'ngx-material-timepicker-button',\n    templateUrl: './ngx-material-timepicker-button.component.html',\n    styleUrls: ['./ngx-material-timepicker-button.component.scss']\n})\nexport class NgxMaterialTimepickerButtonComponent {\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n    TemplateRef\n} from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { DateTime, Info } from 'luxon';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial',\n    templateUrl: 'ngx-material-timepicker-dial.component.html',\n    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\n\n    timeUnit = TimeUnit;\n\n    hours: ClockFaceTime[];\n    minutes: ClockFaceTime[];\n    meridiems = Info.meridiems({locale: this.locale});\n\n    isHintVisible: boolean;\n\n    @Input() editableHintTmpl: TemplateRef<Node>;\n    @Input() hour: number | string;\n    @Input() minute: number | string;\n    @Input() format: number;\n    @Input() period: TimePeriod;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n    @Input() hoursOnly: boolean;\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes['period'] && changes['period'].currentValue\n            || changes['format'] && changes['format'].currentValue) {\n            const hours = TimepickerTimeUtils.getHours(this.format);\n\n            this.hours = TimepickerTimeUtils.disableHours(hours, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n        if (changes['period'] && changes['period'].currentValue\n            || changes['hour'] && changes['hour'].currentValue) {\n            const minutes = TimepickerTimeUtils.getMinutes(this.minutesGap);\n\n            this.minutes = TimepickerTimeUtils.disableMinutes(minutes, +this.hour, {\n                min: this.minTime,\n                max: this.maxTime,\n                format: this.format,\n                period: this.period\n            });\n        }\n    }\n\n    changeTimeUnit(unit: TimeUnit): void {\n        this.timeUnitChanged.next(unit);\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.periodChanged.next(period);\n    }\n\n    changeHour(hour: ClockFaceTime): void {\n        this.hourChanged.next(hour);\n    }\n\n    changeMinute(minute: ClockFaceTime): void {\n        this.minuteChanged.next(minute);\n    }\n\n    showHint(): void {\n        this.isHintVisible = true;\n    }\n\n    hideHint(): void {\n        this.isHintVisible = false;\n    }\n}\n","import { Inject, Injectable, Pipe, PipeTransform } from '@angular/core';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\ntype TimeMeasure = 'hour' | 'minute';\n\n@Pipe({\n    name: 'timeParser'\n})\n@Injectable()\nexport class TimeParserPipe implements PipeTransform {\n\n    private readonly numberingSystem: string;\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n        this.numberingSystem = DateTime.local().setLocale(this.locale).resolvedLocaleOpts().numberingSystem;\n    }\n\n    transform(time: string | number, timeUnit = TimeUnit.HOUR): number | string {\n        if (time == null || time === '') {\n            return '';\n        }\n\n        if (!isNaN(+time)) {\n            return time;\n        }\n\n        if (timeUnit === TimeUnit.MINUTE) {\n            return this.parseTime(time, 'm', 'minute');\n        }\n\n        return this.parseTime(time, 'H', 'hour');\n\n    }\n\n    private parseTime(time: string | number, format: string, timeMeasure: TimeMeasure): number {\n        const parsedTime = DateTime.fromFormat(String(time), format, {numberingSystem: this.numberingSystem})[timeMeasure];\n\n        if (!isNaN(parsedTime)) {\n            return parsedTime;\n        }\n\n        throw new Error(`Cannot parse time - ${time}`);\n    }\n\n}\n","/* tslint:disable:triple-equals */\nimport {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\nimport {TimeUnit} from '../../models/time-unit.enum';\nimport {isDigit} from '../../utils/timepicker.utils';\nimport {TimeParserPipe} from '../../pipes/time-parser.pipe';\n\n@Component({\n    selector: 'ngx-material-timepicker-dial-control',\n    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\n    styleUrls: ['ngx-material-timepicker-dial-control.component.scss'],\n    providers: [TimeParserPipe]\n})\nexport class NgxMaterialTimepickerDialControlComponent {\n\n    previousTime: number | string;\n\n    @Input() timeList: ClockFaceTime[];\n    @Input() timeUnit: TimeUnit;\n    @Input() time: string;\n    @Input() isActive: boolean;\n    @Input() isEditable: boolean;\n    @Input() minutesGap: number;\n    @Input() disabled: boolean;\n\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\n    @Output() focused = new EventEmitter<null>();\n    @Output() unfocused = new EventEmitter<null>();\n\n    constructor(private timeParserPipe: TimeParserPipe) {\n    }\n\n    private get selectedTime(): ClockFaceTime {\n        if (!!this.time) {\n            return this.timeList.find(t => t.time === +this.time);\n        }\n    }\n\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: TimeUnit): void {\n        event.preventDefault();\n        this.previousTime = this.time;\n        this.timeUnitChanged.next(unit);\n        this.focused.next();\n    }\n\n    updateTime(): void {\n        const time = this.selectedTime;\n        if (time) {\n            this.timeChanged.next(time);\n            this.previousTime = time.time;\n        }\n    }\n\n    changeTimeByKeyboard(e: any): void {\n        const char = String.fromCharCode(e.keyCode);\n\n        if (isTimeDisabledToChange(this.time, char, this.timeList)) {\n            e.preventDefault();\n        }\n    }\n\n    onKeydown(e: any): void {\n        if (!isDigit(e)) {\n            e.preventDefault();\n        } else {\n            this.changeTimeByArrow(e.keyCode);\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = this.timeParserPipe.transform(value, this.timeUnit).toString();\n    }\n\n    private changeTimeByArrow(keyCode: number): void {\n        const ARROW_UP = 38;\n        const ARROW_DOWN = 40;\n        let time: string;\n\n        if (keyCode === ARROW_UP) {\n            time = String(+this.time + (this.minutesGap || 1));\n        } else if (keyCode === ARROW_DOWN) {\n            time = String(+this.time - (this.minutesGap || 1));\n        }\n\n        if (!isTimeUnavailable(time, this.timeList)) {\n            this.time = time;\n            this.updateTime();\n        }\n    }\n\n}\n\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: ClockFaceTime[]): boolean {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return isTimeUnavailable(time, timeList);\n    }\n}\n\nfunction isTimeUnavailable(time: string, timeList: ClockFaceTime[]): boolean {\n    const selectedTime = timeList.find(value => value.time === +time);\n    return !selectedTime || (selectedTime && selectedTime.disabled);\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { animate, sequence, style, transition, trigger } from '@angular/animations';\nimport { DateTime } from 'luxon';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\n\n@Component({\n    selector: 'ngx-material-timepicker-period',\n    templateUrl: 'ngx-material-timepicker-period.component.html',\n    styleUrls: ['ngx-material-timepicker-period.component.scss'],\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)'}),\n                animate('.2s', style({transform: 'scale(1)'})),\n                sequence([\n                    animate('3s', style({opacity: 1})),\n                    animate('.3s', style({opacity: 0}))\n                ])\n            ])\n        ])\n    ]\n})\nexport class NgxMaterialTimepickerPeriodComponent {\n\n    timePeriod = TimePeriod;\n    isPeriodAvailable = true;\n\n    @Input() selectedPeriod: TimePeriod;\n    @Input() format: number;\n    @Input() activeTimeUnit: TimeUnit;\n    @Input() hours: ClockFaceTime[];\n    @Input() minutes: ClockFaceTime[];\n    @Input() minTime: DateTime;\n    @Input() maxTime: DateTime;\n    @Input() selectedHour: number | string;\n    @Input() meridiems: string[];\n\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\n\n    changePeriod(period: TimePeriod): void {\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\n        if (this.isPeriodAvailable) {\n            this.periodChanged.next(period);\n        }\n    }\n\n    animationDone(): void {\n        this.isPeriodAvailable = true;\n    }\n\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\n        const time = this.getDisabledTimeByPeriod(period);\n        return !time.every(t => t.disabled);\n    }\n\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\n        switch (this.activeTimeUnit) {\n            case TimeUnit.HOUR:\n                return TimepickerTimeUtils.disableHours(this.hours, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            case TimeUnit.MINUTE:\n                return TimepickerTimeUtils.disableMinutes(this.minutes, +this.selectedHour, {\n                    min: this.minTime,\n                    max: this.maxTime,\n                    format: this.format,\n                    period\n                });\n            default:\n                throw new Error('no such TimeUnit');\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\n@Pipe({\n    name: 'timeFormatter'\n})\nexport class TimeFormatterPipe implements PipeTransform {\n\n    transform(time: number | string, timeUnit: TimeUnit): any {\n        if (time == null || time === '') {\n            return time;\n        }\n        switch (timeUnit) {\n            case TimeUnit.HOUR:\n                return DateTime.fromObject({hour: +time}).toFormat('HH');\n            case TimeUnit.MINUTE:\n                return DateTime.fromObject({minute: +time}).toFormat('mm');\n            default:\n                throw new Error('no such time unit');\n        }\n    }\n\n}\n","import { Directive, HostListener, Input } from '@angular/core';\nimport {NgxMaterialTimepickerEventService} from '../services/ngx-material-timepicker-event.service';\n\n@Directive({\n    selector: '[overlay]'\n})\nexport class OverlayDirective {\n\n    @Input('overlay') preventClick: boolean;\n\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\n    }\n\n\n    @HostListener('click', ['$event'])\n    onClick(e: any) {\n        if (!this.preventClick) {\n            this.eventService.dispatchEvent(e);\n        }\n        e.preventDefault();\n    }\n\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({\n    name: 'minutesFormatter'\n})\nexport class MinutesFormatterPipe implements PipeTransform {\n\n    transform(minute: number, gap = 5): number | string {\n        if (!minute) {\n            return minute;\n        }\n\n        return minute % gap === 0 ? minute : '';\n    }\n\n}\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\n\n@Directive({\n    selector: '[timepickerAutofocus]'\n})\nexport class AutofocusDirective implements OnChanges, OnDestroy {\n\n    @Input('timepickerAutofocus') isFocusActive: boolean;\n\n    private activeElement: HTMLElement;\n\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\n        this.activeElement = this.document.activeElement;\n    }\n\n    ngOnChanges() {\n        if (this.isFocusActive) {\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n            setTimeout(() => this.element.nativeElement.focus({ preventScroll: true }));\n        }\n    }\n\n    ngOnDestroy() {\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\n        setTimeout(() => this.activeElement.focus({ preventScroll: true }));\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, OnDestroy, OnInit, Output, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\nimport { Observable, Subject } from 'rxjs';\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\nimport { TimePeriod } from '../../models/time-period.enum';\nimport { TimeUnit } from '../../models/time-unit.enum';\nimport { NgxMaterialTimepickerTheme } from '../../models/ngx-material-timepicker-theme.interface';\nimport { TimeAdapter } from '../../services/time-adapter';\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\nimport { TimepickerTimeUtils } from '../../utils/timepicker-time.utils';\nimport { DateTime } from 'luxon';\nimport { distinctUntilChanged, map, takeUntil, tap } from 'rxjs/operators';\n\n@Component({\n    selector: 'ngx-timepicker-field',\n    templateUrl: './ngx-timepicker-field.component.html',\n    styleUrls: ['./ngx-timepicker-field.component.scss'],\n    providers: [\n        NgxMaterialTimepickerService,\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: NgxTimepickerFieldComponent,\n            multi: true\n        }\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxTimepickerFieldComponent implements OnInit, OnDestroy, ControlValueAccessor {\n\n    period: TimePeriod;\n    hour$: Observable<ClockFaceTime>;\n    minute$: Observable<ClockFaceTime>;\n\n    minHour = 1;\n    maxHour = 12;\n\n    timeUnit = TimeUnit;\n    timepickerTime: string;\n\n    hoursList: ClockFaceTime[];\n    minutesList: ClockFaceTime[];\n\n    isTimeRangeSet: boolean;\n    isChangePeriodDisabled: boolean;\n\n    @Input() disabled: boolean;\n    @Input() toggleIcon: TemplateRef<HTMLObjectElement>;\n    @Input() buttonAlign: 'right' | 'left' = 'right';\n    @Input() clockTheme: NgxMaterialTimepickerTheme;\n    @Input() controlOnly: boolean;\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\n\n    @Input()\n    set format(value: number) {\n        this._format = value === 24 ? 24 : 12;\n        this.minHour = this._format === 12 ? 1 : 0;\n        this.maxHour = this._format === 12 ? 12 : 23;\n        this.hoursList = TimepickerTimeUtils.getHours(this._format);\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\n\n        if (isDynamicallyChanged) {\n            this.updateTime(this.timepickerTime);\n        }\n        this.previousFormat = this._format;\n    }\n\n    get format(): number {\n        return this._format;\n    }\n\n    @Input()\n    set min(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._min = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._min = value;\n    }\n\n    get min(): string | DateTime {\n        return this._min;\n    }\n\n    @Input()\n    set max(value: string | DateTime) {\n        if (typeof value === 'string') {\n            this._max = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\n            return;\n        }\n        this._max = value;\n    }\n\n    get max(): string | DateTime {\n        return this._max;\n    }\n\n    @Input()\n    set defaultTime(val: string) {\n        this._defaultTime = val;\n        this.isDefaultTime = !!val;\n    }\n\n    get defaultTime(): string {\n        return this._defaultTime;\n    }\n\n    @Output() timeChanged = new EventEmitter<string>();\n\n    private _defaultTime: string;\n    private _format = 12;\n    private _min: string | DateTime;\n    private _max: string | DateTime;\n    private previousFormat: number;\n\n    private unsubscribe$ = new Subject();\n\n    private isFirstTimeChange = true;\n    private isDefaultTime: boolean;\n    private selectedHour: number;\n\n    private onChange: (value: string) => void = () => {\n    }\n\n    constructor(private timepickerService: NgxMaterialTimepickerService,\n                @Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    ngOnInit() {\n        this.initTime(this.defaultTime);\n\n        this.hoursList = TimepickerTimeUtils.getHours(this._format);\n        this.minutesList = TimepickerTimeUtils.getMinutes();\n        this.isTimeRangeSet = !!(this.min || this.max);\n\n        this.hour$ = this.timepickerService.selectedHour.pipe(\n            tap((clockTime: ClockFaceTime) => this.selectedHour = clockTime.time),\n            map(this.changeDefaultTimeValue.bind(this)),\n            tap(() => this.isTimeRangeSet && this.updateAvailableMinutes())\n        ) as Observable<ClockFaceTime>;\n        this.minute$ = this.timepickerService.selectedMinute.pipe(\n            map(this.changeDefaultTimeValue.bind(this)),\n            tap(() => this.isFirstTimeChange = false)\n        ) as Observable<ClockFaceTime>;\n\n        if (this.format === 12) {\n            this.timepickerService.selectedPeriod.pipe(\n                distinctUntilChanged<TimePeriod>(),\n                tap((period: TimePeriod) => this.period = period),\n                tap(period => this.isChangePeriodDisabled = this.isPeriodDisabled(period)),\n                takeUntil(this.unsubscribe$)\n            ).subscribe(() => this.isTimeRangeSet && this.updateAvailableTime());\n        }\n\n    }\n\n    writeValue(val: string): void {\n        if (val) {\n            this.initTime(val);\n        } else {\n            this.resetTime();\n        }\n    }\n\n    registerOnTouched(fn: any): void {\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChange = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    changeHour(hour: number): void {\n        this.timepickerService.hour = this.hoursList.find(h => h.time === hour);\n        this.changeTime();\n    }\n\n    changeMinute(minute: number): void {\n        this.timepickerService.minute = this.minutesList.find(m => m.time === minute);\n        this.changeTime();\n    }\n\n    changePeriod(period: TimePeriod): void {\n        this.timepickerService.period = period;\n        this.changeTime();\n    }\n\n    onTimeSet(time: string): void {\n        this.updateTime(time);\n        this.emitLocalTimeChange(time);\n    }\n\n    ngOnDestroy(): void {\n        this.unsubscribe$.next();\n        this.unsubscribe$.complete();\n    }\n\n    private changeTime(): void {\n        const time = this.timepickerService.getFullTime(this.format);\n        this.timepickerTime = time;\n\n        this.emitLocalTimeChange(time);\n    }\n\n    private resetTime(): void {\n        this.timepickerService.hour = {angle: 0, time: null};\n        this.timepickerService.minute = {angle: 0, time: null};\n    }\n\n    private emitLocalTimeChange(time: string): void {\n        const localTime = TimeAdapter.toLocaleTimeString(time, {format: this.format, locale: this.locale});\n\n        this.onChange(localTime);\n        this.timeChanged.emit(localTime);\n    }\n\n    private changeDefaultTimeValue(clockFaceTime: ClockFaceTime): ClockFaceTime {\n        if (!this.isDefaultTime && this.isFirstTimeChange) {\n            return {...clockFaceTime, time: null};\n        }\n        return clockFaceTime;\n    }\n\n    private updateAvailableHours(): void {\n        this.hoursList = TimepickerTimeUtils.disableHours(this.hoursList, {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: this.format,\n            period: this.period\n        });\n    }\n\n    private updateAvailableMinutes(): void {\n        this.minutesList = TimepickerTimeUtils.disableMinutes(this.minutesList, this.selectedHour, {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: this.format,\n            period: this.period\n        });\n    }\n\n    private updateAvailableTime(): void {\n        this.updateAvailableHours();\n        if (this.selectedHour) {\n            this.updateAvailableMinutes();\n        }\n    }\n\n    private updateTime(time: string): void {\n        if (time) {\n            const formattedTime = TimeAdapter.formatTime(time, {locale: this.locale, format: this.format});\n            this.timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min as DateTime, this.max as DateTime, this.format);\n            this.timepickerTime = formattedTime;\n        }\n    }\n\n    private initTime(time): void {\n        const isDefaultTimeAvailable = TimeAdapter\n            .isTimeAvailable(time, this.min as DateTime, this.max as DateTime, 'minutes', null, this.format);\n        if (!isDefaultTimeAvailable) {\n            if (this.min) {\n                this.updateTime(TimeAdapter.fromDateTimeToString(this.min as DateTime, this.format));\n                return;\n            }\n            if (this.max) {\n                this.updateTime(TimeAdapter.fromDateTimeToString(this.max as DateTime, this.format));\n                return;\n            }\n        }\n        this.updateTime(time);\n    }\n\n    private isPeriodDisabled(period): boolean {\n        return TimepickerTimeUtils.disableHours(TimepickerTimeUtils.getHours(12), {\n            min: this.min as DateTime,\n            max: this.max as DateTime,\n            format: 12,\n            period: period === TimePeriod.AM ? TimePeriod.PM : TimePeriod.AM\n        }).every(time => time.disabled);\n    }\n\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { isDigit } from '../../../utils/timepicker.utils';\nimport { TimeUnit } from '../../../models/time-unit.enum';\nimport { TimeParserPipe } from '../../../pipes/time-parser.pipe';\nimport { ClockFaceTime } from '../../../models/clock-face-time.interface';\n\n@Component({\n    selector: 'ngx-timepicker-time-control',\n    templateUrl: './ngx-timepicker-time-control.component.html',\n    styleUrls: ['./ngx-timepicker-time-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TimeParserPipe]\n})\n\nexport class NgxTimepickerTimeControlComponent implements OnChanges {\n\n    @Input() time: number;\n    @Input() min: number;\n    @Input() max: number;\n    @Input() placeholder: string;\n    @Input() timeUnit: TimeUnit;\n    @Input() disabled: boolean;\n    @Input() timeList: ClockFaceTime[];\n    @Input() preventTyping: boolean;\n\n    @Output() timeChanged = new EventEmitter<number>();\n\n    isFocused: boolean;\n\n    private previousTime: number;\n\n    constructor(private timeParser: TimeParserPipe) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.timeList && this.time != null) {\n            if (this.isSelectedTimeDisabled(this.time)) {\n                this.setAvailableTime();\n            }\n        }\n    }\n\n    changeTime(event: any): void {\n        event.stopPropagation();\n\n        const char = String.fromCharCode(event.keyCode);\n        const time = concatTime(String(this.time), char);\n\n        this.changeTimeIfValid(time);\n    }\n\n    onKeydown(event: any): void {\n        event.stopPropagation();\n\n        if (!isDigit(event)) {\n            event.preventDefault();\n        }\n\n        switch (event.key) {\n            case 'ArrowUp':\n                this.increase();\n                break;\n            case 'ArrowDown':\n                this.decrease();\n                break;\n        }\n\n        if (this.preventTyping && event.key !== 'Tab') {\n            event.preventDefault();\n        }\n    }\n\n    increase(): void {\n        if (!this.disabled) {\n            let nextTime = +this.time + 1;\n\n            if (nextTime > this.max) {\n                nextTime = this.min;\n            }\n\n            if (this.isSelectedTimeDisabled(nextTime)) {\n                nextTime = this.getAvailableTime(nextTime, this.getNextAvailableTime.bind(this));\n            }\n\n            if (nextTime !== this.time) {\n                this.timeChanged.emit(nextTime);\n            }\n        }\n    }\n\n    decrease(): void {\n        if (!this.disabled) {\n            let previousTime = +this.time - 1;\n\n            if (previousTime < this.min) {\n                previousTime = this.max;\n            }\n\n            if (this.isSelectedTimeDisabled(previousTime)) {\n                previousTime = this.getAvailableTime(previousTime, this.getPrevAvailableTime.bind(this));\n            }\n\n            if (previousTime !== this.time) {\n                this.timeChanged.emit(previousTime);\n            }\n        }\n    }\n\n    onFocus(): void {\n        this.isFocused = true;\n        this.previousTime = this.time;\n    }\n\n    onBlur(): void {\n        this.isFocused = false;\n\n        if (this.previousTime !== this.time) {\n            this.changeTimeIfValid(+this.time);\n        }\n    }\n\n    onModelChange(value: string): void {\n        this.time = +this.timeParser.transform(value, this.timeUnit);\n    }\n\n    private changeTimeIfValid(value: number | undefined) {\n        if (!isNaN(value)) {\n            this.time = value;\n\n            if (this.time > this.max) {\n                const timeString = String(value);\n                this.time = +timeString[timeString.length - 1];\n            }\n\n            if (this.time < this.min) {\n                this.time = this.min;\n            }\n\n            this.timeChanged.emit(this.time);\n        }\n    }\n\n    private isSelectedTimeDisabled(time: number): boolean {\n        return this.timeList.find((faceTime: ClockFaceTime) => faceTime.time === time).disabled;\n    }\n\n    private getNextAvailableTime(index: number): number | undefined {\n        const timeCollection = this.timeList;\n        const maxValue = timeCollection.length;\n        for (let i = index + 1; i < maxValue; i++) {\n            const time = timeCollection[i];\n            if (!time.disabled) {\n                return time.time;\n            }\n        }\n    }\n\n    private getPrevAvailableTime(index: number): number | undefined {\n        for (let i = index; i >= 0; i--) {\n            const time = this.timeList[i];\n            if (!time.disabled) {\n                return time.time;\n            }\n        }\n    }\n\n    private getAvailableTime(currentTime: number, fn: (index: number) => number | undefined): number | undefined {\n        const currentTimeIndex = this.timeList.findIndex(time => time.time === currentTime);\n        const availableTime = fn(currentTimeIndex);\n\n        return availableTime != null ? availableTime : this.time;\n    }\n\n    private setAvailableTime(): void {\n        this.time = this.timeList.find(t => !t.disabled).time;\n        this.timeChanged.emit(this.time);\n    }\n}\n\nfunction concatTime(currentTime: string, nextTime: string): number {\n    const isNumber = /\\d/.test(nextTime);\n\n    if (isNumber) {\n        const time = currentTime + nextTime;\n        return +time;\n    }\n}\n\n","import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { TimePeriod } from '../../../models/time-period.enum';\nimport { animate, style, transition, trigger } from '@angular/animations';\nimport { TIME_LOCALE } from '../../../tokens/time-locale.token';\nimport { Info } from 'luxon';\n\n@Component({\n    selector: 'ngx-timepicker-period-selector',\n    templateUrl: 'ngx-timepicker-period-selector.component.html',\n    styleUrls: ['./ngx-timepicker-period-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('scaleInOut', [\n            transition(':enter', [\n                style({transform: 'scale(0)', opacity: 0}),\n                animate(200, style({transform: 'scale(1)', opacity: 1}))\n            ]),\n            transition(':leave', [\n                animate(200, style({transform: 'scale(0)', opacity: 0}))\n            ])\n        ])\n    ]\n})\n\nexport class NgxTimepickerPeriodSelectorComponent {\n\n    @Input() isOpened: boolean;\n    @Input() disabled: boolean;\n    @Input()\n    set selectedPeriod(period: TimePeriod) {\n        if (period) {\n            const periods = [TimePeriod.AM, TimePeriod.PM];\n            this.localizedPeriod = this.meridiems[periods.indexOf(period)];\n        }\n    }\n\n    @Output() periodSelected = new EventEmitter<TimePeriod>();\n\n    period = TimePeriod;\n    meridiems = Info.meridiems({locale: this.locale});\n    localizedPeriod: string;\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    open(): void {\n        if (!this.disabled) {\n            this.isOpened = true;\n        }\n    }\n\n    select(period: TimePeriod): void {\n        this.periodSelected.next(period);\n        this.isOpened = false;\n    }\n\n    backdropClick(): void {\n        this.isOpened = false;\n    }\n}\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\nimport { TimeUnit } from '../models/time-unit.enum';\nimport { DateTime } from 'luxon';\n\ntype TimeMeasure = 'hour' | 'minute';\n\n@Pipe({\n    name: 'timeLocalizer'\n})\nexport class TimeLocalizerPipe implements PipeTransform {\n\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\n    }\n\n    transform(time: number | string, timeUnit: TimeUnit, isKeyboardEnabled = false): string {\n        if (time == null || time === '') {\n            return '';\n        }\n\n        switch (timeUnit) {\n            case TimeUnit.HOUR: {\n                const format = (time === 0 || isKeyboardEnabled) ? 'HH' : 'H';\n                return this.formatTime('hour', time, format);\n            }\n            case TimeUnit.MINUTE:\n                return this.formatTime('minute', time, 'mm');\n            default:\n                throw new Error(`There is no Time Unit with type ${timeUnit}`);\n        }\n    }\n\n    private formatTime(timeMeasure: TimeMeasure, time: string | number, format: string): string {\n        try {\n            return DateTime.fromObject({[timeMeasure]: +time}).setLocale(this.locale).toFormat(format);\n        } catch {\n            throw new Error(`Cannot format provided time - ${time} to locale - ${this.locale}`);\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeHour'\n})\nexport class ActiveHourPipe implements PipeTransform {\n\n    transform(hour: number, currentHour: number, isClockFaceDisabled: boolean): boolean {\n        if (hour == null || isClockFaceDisabled) {\n            return false;\n        }\n\n        return hour === currentHour;\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'activeMinute'\n})\nexport class ActiveMinutePipe implements PipeTransform {\n\n    transform(minute: number, currentMinute: number, gap: number, isClockFaceDisabled: boolean): boolean {\n        if (minute == null || isClockFaceDisabled) {\n            return false;\n        }\n        const defaultGap = 5;\n\n        return ((currentMinute === minute) && (minute % (gap || defaultGap) === 0));\n    }\n\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ngx-material-timepicker-content',\n    templateUrl: './ngx-material-timepicker-content.component.html',\n})\nexport class NgxMaterialTimepickerContentComponent {\n    @Input() appendToInput: boolean;\n    @Input() inputElement: any;\n}\n","import { AfterViewInit, Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';\n\ntype TimepickerDirection = 'top' | 'center' | 'bottom';\n\n@Directive({\n    selector: '[ngxAppendToInput]'\n})\nexport class AppendToInputDirective implements AfterViewInit {\n\n    @Input('ngxAppendToInput') inputElement: any;\n\n    private _direction: TimepickerDirection;\n    private _inputCords: ClientRect;\n    private readonly element: HTMLElement;\n\n    constructor(elementRef: ElementRef<HTMLElement>,\n                private renderer: Renderer2) {\n        this.element = elementRef.nativeElement;\n    }\n\n    private get inputCords(): ClientRect {\n        return this.inputElement.getBoundingClientRect();\n    }\n\n    private get direction(): TimepickerDirection {\n        const height = this.element.offsetHeight;\n        const {bottom, top} = this._inputCords;\n        const isElementFit = (window && window.innerHeight) - bottom < height;\n        const isTop = isElementFit && top > height;\n        const isCenter = isElementFit && top < height;\n\n        if (isTop) {\n            return 'top';\n        } else if (isCenter) {\n            return 'center';\n        }\n        return 'bottom';\n    }\n\n    ngAfterViewInit(): void {\n        this._inputCords = this.inputCords;\n        this._direction = this.direction;\n\n        this.append();\n    }\n\n    @HostListener('window:scroll')\n    changePosition(): void {\n        const {bottom, top} = this.inputCords;\n        const y = this.defineElementYByDirection(top, bottom);\n        this.setStyle('top', `${y}px`);\n    }\n\n    private append(): void {\n        const {left, bottom, top} = this._inputCords;\n        const y = this.defineElementYByDirection(top, bottom);\n\n        this.setStyle('position', 'fixed');\n        this.setStyle('left', `${left}px`);\n        this.setStyle('top', `${y}px`);\n    }\n\n    private setStyle(style: string, value: string): void {\n        this.renderer.setStyle(this.element, style, value);\n    }\n\n    private defineElementYByDirection(inputTop: number, inputBottom: number): number {\n        if (this._direction === 'top') {\n            return inputTop - this.element.offsetHeight;\n        } else if (this._direction === 'center') {\n            return inputTop - (this.element.offsetHeight / 2);\n        }\n        return inputBottom;\n    }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxMaterialTimepickerComponent } from './ngx-material-timepicker.component';\nimport { FormsModule } from '@angular/forms';\nimport { NgxMaterialTimepickerToggleComponent } from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\nimport { NgxMaterialTimepickerToggleIconDirective } from './directives/ngx-material-timepicker-toggle-icon.directive';\nimport { NgxMaterialTimepickerThemeDirective } from './directives/ngx-material-timepicker-theme.directive';\nimport {\n    NgxMaterialTimepicker24HoursFaceComponent\n} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\nimport {\n    NgxMaterialTimepicker12HoursFaceComponent\n} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\nimport {\n    NgxMaterialTimepickerMinutesFaceComponent } from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\nimport { NgxMaterialTimepickerFaceComponent } from './components/timepicker-face/ngx-material-timepicker-face.component';\nimport { NgxMaterialTimepickerButtonComponent } from './components/timepicker-button/ngx-material-timepicker-button.component';\nimport { NgxMaterialTimepickerDialComponent } from './components/timepicker-dial/ngx-material-timepicker-dial.component';\nimport {\n    NgxMaterialTimepickerDialControlComponent } from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\nimport { NgxMaterialTimepickerPeriodComponent } from './components/timepicker-period/ngx-material-timepicker-period.component';\nimport { TimeFormatterPipe } from './pipes/time-formatter.pipe';\nimport { OverlayDirective } from './directives/overlay.directive';\nimport { MinutesFormatterPipe } from './pipes/minutes-formatter.pipe';\nimport { AutofocusDirective } from './directives/autofocus.directive';\nimport { NgxTimepickerFieldComponent } from './components/timepicker-field/ngx-timepicker-field.component';\nimport {\n    NgxTimepickerTimeControlComponent\n} from './components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component';\nimport {\n    NgxTimepickerPeriodSelectorComponent\n} from './components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component';\nimport { TimeLocalizerPipe } from './pipes/time-localizer.pipe';\nimport { TIME_LOCALE } from './tokens/time-locale.token';\nimport { TimeParserPipe } from './pipes/time-parser.pipe';\nimport { ActiveHourPipe } from './pipes/active-hour.pipe';\nimport { ActiveMinutePipe } from './pipes/active-minute.pipe';\nimport {\n    NgxMaterialTimepickerContainerComponent\n} from './components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nimport {\n    NgxMaterialTimepickerContentComponent\n} from './components/ngx-material-timepicker-content/ngx-material-timepicker-content.component';\nimport { AppendToInputDirective } from './directives/append-to-input.directive';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxTimepickerFieldComponent,\n        TimepickerDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        NgxMaterialTimepickerThemeDirective,\n        NgxMaterialTimepicker24HoursFaceComponent,\n        NgxMaterialTimepicker12HoursFaceComponent,\n        NgxMaterialTimepickerMinutesFaceComponent,\n        NgxMaterialTimepickerFaceComponent,\n        NgxMaterialTimepickerDialComponent,\n        NgxMaterialTimepickerDialControlComponent\n    ],\n    declarations: [\n        NgxMaterialTimepickerComponent,\n        NgxMaterialTimepicker24HoursFaceComponent,\n        NgxMaterialTimepicker12HoursFaceComponent,\n        NgxMaterialTimepickerMinutesFaceComponent,\n        NgxMaterialTimepickerFaceComponent,\n        NgxMaterialTimepickerToggleComponent,\n        NgxMaterialTimepickerButtonComponent,\n        NgxMaterialTimepickerDialComponent,\n        NgxMaterialTimepickerDialControlComponent,\n        NgxMaterialTimepickerPeriodComponent,\n        TimeFormatterPipe,\n        TimepickerDirective,\n        OverlayDirective,\n        NgxMaterialTimepickerToggleIconDirective,\n        AutofocusDirective,\n        MinutesFormatterPipe,\n        NgxMaterialTimepickerThemeDirective,\n        NgxTimepickerFieldComponent,\n        NgxTimepickerTimeControlComponent,\n        NgxTimepickerPeriodSelectorComponent,\n        TimeLocalizerPipe,\n        TimeParserPipe,\n        ActiveHourPipe,\n        ActiveMinutePipe,\n        NgxMaterialTimepickerContainerComponent,\n        NgxMaterialTimepickerContentComponent,\n        AppendToInputDirective\n    ],\n    entryComponents: [NgxMaterialTimepickerContainerComponent]\n})\nexport class NgxMaterialTimepickerModule {\n\n    static setLocale(locale: string): ModuleWithProviders<NgxMaterialTimepickerModule> {\n        return {\n            ngModule: NgxMaterialTimepickerModule,\n            providers: [\n                {provide: TIME_LOCALE, useValue: locale}\n            ]\n        };\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {AnimationState as ɵs,NgxMaterialTimepickerContainerComponent as ɵt} from './src/app/material-timepicker/components/ngx-material-timepicker-container/ngx-material-timepicker-container.component';\nexport {NgxMaterialTimepickerContentComponent as ɵu} from './src/app/material-timepicker/components/ngx-material-timepicker-content/ngx-material-timepicker-content.component';\nexport {NgxMaterialTimepickerButtonComponent as ɵh} from './src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component';\nexport {NgxTimepickerPeriodSelectorComponent as ɵo} from './src/app/material-timepicker/components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component';\nexport {NgxTimepickerTimeControlComponent as ɵn} from './src/app/material-timepicker/components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component';\nexport {NgxMaterialTimepickerHoursFace as ɵf} from './src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face';\nexport {NgxMaterialTimepickerPeriodComponent as ɵi} from './src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component';\nexport {NgxMaterialTimepickerToggleComponent as ɵc} from './src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\nexport {AppendToInputDirective as ɵv} from './src/app/material-timepicker/directives/append-to-input.directive';\nexport {AutofocusDirective as ɵl} from './src/app/material-timepicker/directives/autofocus.directive';\nexport {OverlayDirective as ɵk} from './src/app/material-timepicker/directives/overlay.directive';\nexport {ActiveHourPipe as ɵq} from './src/app/material-timepicker/pipes/active-hour.pipe';\nexport {ActiveMinutePipe as ɵr} from './src/app/material-timepicker/pipes/active-minute.pipe';\nexport {MinutesFormatterPipe as ɵm} from './src/app/material-timepicker/pipes/minutes-formatter.pipe';\nexport {TimeFormatterPipe as ɵj} from './src/app/material-timepicker/pipes/time-formatter.pipe';\nexport {TimeLocalizerPipe as ɵp} from './src/app/material-timepicker/pipes/time-localizer.pipe';\nexport {TimeParserPipe as ɵg} from './src/app/material-timepicker/pipes/time-parser.pipe';\nexport {DomService as ɵb} from './src/app/material-timepicker/services/dom.service';\nexport {NgxMaterialTimepickerEventService as ɵa} from './src/app/material-timepicker/services/ngx-material-timepicker-event.service';\nexport {NgxMaterialTimepickerService as ɵd} from './src/app/material-timepicker/services/ngx-material-timepicker.service';\nexport {TIME_LOCALE as ɵe} from './src/app/material-timepicker/tokens/time-locale.token';"]},"metadata":{},"sourceType":"module"}